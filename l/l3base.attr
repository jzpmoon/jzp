/*
 * common function define subr
 */
static vcfg_graph* subr(vast_attr_req* subreq,int scope)
{
  vps_jzp_req* jreq;
  vast_obj* next;
  vast_obj* obj;
  vast_symbol* subr_name;
  vast_obj* args;
  vcfg_graph* grp;
  vps_jzp_req dreq;

  jreq = (vps_jzp_req*)subreq;
  dreq = vast_req_dbl(jreq);

  next = vast_cdr(jreq->ast_obj);
  if(!next || next->t != vastk_cons){
    uabort("subr error!");
  }

  obj = vast_car(next);
  if(!obj || obj->t != vastk_symbol){
    uabort("subr name invalid!");
  }
  subr_name = (vast_symbol*)obj;

  next = vast_cdr(next);
  if(!next || next->t != vastk_cons){
    uabort("subr error!");
  }

  grp = vcfg_graph_new(jreq->vps,subr_name->name);
  if(!grp){
    uabort("subr new cfg error!");
  }
  grp->parent = (vps_t*)jreq->top;
  grp->scope = scope;

  obj = vast_car(next);
  if(obj){
    int arg_idx = 0;
    if(obj->t != vastk_cons){
      uabort("subr args invalid!");
    }
    args = obj;
    /* args procedure */
    while(args != NULL){
      vast_obj* arg;
      vast_symbol* sym;
      vps_data* data;

      arg = vast_car(args);
      if (arg->t != vastk_symbol) {
	uabort("arg not a symbol!");
      }
      sym = (vast_symbol*)arg;
      data = vps_any_new(jreq->vps,sym->name);
      if(!data){
	uabort("vps_any_new error!");
      }
      data->idx = arg_idx;
      data->scope = VPS_SCOPE_LOCAL;
      vcfg_grp_params_apd(grp,data);
      args = vast_cdr(args);
      arg_idx++;
    }
  }

  dreq.parent = (vps_cfg*)grp;
  next = vast_cdr(next);
  /* instruction sequence */
  while(next){
    vast_obj* car;
    vast_symbol* inst_name;
    if(next->t != vastk_cons){
      uabort("subr error!");
    }
    obj = vast_car(next);
    if(obj->t != vastk_cons){
      uabort("subr error!");
    }
    car = vast_car(obj);
    if(!car || car->t != vastk_symbol){
      uabort("subr inst invalid!");
    }
    inst_name = (vast_symbol*)car;
    if(inst_name->attr){
      vast_attr_res res;
      vast_attr* attr;

      dreq.ast_obj = obj;
      attr = inst_name->attr;
      if (attr == jreq->reader->dattr) {
	uabort("not a inst!");
      }
      (attr->action)((vast_attr_req*)&dreq,&res);
    } else {
      uabort("symbol not define attribute!");
    }
    next = vast_cdr(next);
  }

  vcfg_grp_build(jreq->vps,grp);
  vcfg_grp_connect(jreq->vps,grp);
  
  return grp;
}

/*
 * define attribute subr
 */
VDEFATTR(g_subr,"g-subr",{
    vps_jzp_req* jreq;
    vcfg_graph* grp;

    jreq = (vps_jzp_req*)req;
    if (!VATTR_CONTEXT_FILE(jreq->parent)) {
      uabort("g-subr inst can not use here!");
    }
    grp = subr(req,VPS_SCOPE_GLOBAL);
    vps_mod_code_put(jreq->top,grp);
    VATTR_RETURN_VOID;
  })
  
/*
 * define attribute subr
 */
VDEFATTR(subr,"subr",{
    vps_jzp_req* jreq;
    vcfg_graph* grp;

    jreq = (vps_jzp_req*)req;
    if (!VATTR_CONTEXT_FILE(jreq->parent)) {
      uabort("subr inst can not use here!");
    }
    grp = subr(req,VPS_SCOPE_LOCAL);
    vps_mod_code_put(jreq->top,grp);
    VATTR_RETURN_VOID;
  })

/*
 * define attribute g-var
 */
VDEFATTR(g_var,"g-var",{
    vps_jzp_req* jreq;
    vast_obj* obj;
    vast_obj* next;

    jreq = (vps_jzp_req*)req;

    if (!VATTR_CONTEXT_FILE(jreq->parent)) {
      uabort("g-var inst can not use here!");
    }
    next = vast_cdr(jreq->ast_obj);
    if(!next){
      uabort("g-var inst have no operand!");
    }
    if(next->t != vastk_cons){
      uabort("g-var inst error!");
    }
    obj = vast_car(next);
    if (!obj) {
      uabort("g-var has no declare variable name!");
    }
    if(obj->t == vastk_symbol){
      vast_symbol* sym = (vast_symbol*)obj;
      vps_data* data;
      data = vps_any_new(jreq->vps,sym->name);
      data->scope = VPS_SCOPE_GLOBAL;
      vps_mod_data_put(jreq->top,data);
    }else{
      uabort("g-var inst error!");
    }
    ulog0("global var");
    VATTR_RETURN_VOID;
  })

/*
 * define attribute var
 */
VDEFATTR(var,"var",{
    vps_jzp_req* jreq;
    vast_obj* obj;
    vast_obj* next;

    jreq = (vps_jzp_req*)req;
    
    if (VATTR_CONTEXT_FILE(jreq->parent)) {
      next = vast_cdr(jreq->ast_obj);
      if (!next) {
	uabort("var inst have no operand!");
      }
      if (next->t != vastk_cons) {
	uabort("var inst error!");
      }
      obj = vast_car(next);
      if (!obj) {
	uabort("g-var has no declare variable name!");
      }
      if (obj->t == vastk_symbol) {
	vast_symbol* sym = (vast_symbol*)obj;
	vps_data* data;
	data = vps_any_new(jreq->vps,sym->name);
	data->scope = VPS_SCOPE_LOCAL;
	vps_mod_data_put(jreq->top,data);
      } else {
	uabort("var inst error!");
      }
      ulog0("local var");
      VATTR_RETURN_VOID;
    } else {
      uabort("var inst can not use here!");
    }
    VATTR_RETURN_VOID;
  })

/*
 * define attribute local
 */
VDEFATTR(local,"local",{
    vps_jzp_req* jreq;
    vast_obj* obj;
    vast_obj* next;

    jreq = (vps_jzp_req*)req;
    
    if(VATTR_CONTEXT_SUBR(jreq->parent)){
      vcfg_graph* grp;

      grp = (vcfg_graph*)jreq->parent;
      if (grp->insts->len > 0) {
	uabort("local only allow use in front of inst!");
      }
      next = vast_cdr(jreq->ast_obj);
      if(!next){
	uabort("local inst have no operand!");
      }
      if(next->t != vastk_cons){
	uabort("local inst error!");
      }
      obj = vast_car(next);
      if (!obj) {
	uabort("local has no declare variable name!");
      }
      if(obj->t == vastk_symbol){
	vast_symbol* sym = (vast_symbol*)obj;
	vps_data* data;
	if(vcfg_grp_dtget(grp,sym->name)){
	  uabort("local name:%s already exists!",sym->name->value);
	}
	data = vps_any_new(jreq->vps,sym->name);
	data->idx = grp->locals->count;
	data->scope = VPS_SCOPE_LOCAL;
	vcfg_grp_locals_apd(grp,data);
      }else{
	uabort("local inst error!");
      }
      ulog0("local");
    } else {
      uabort("local inst can not use here!");
    }
    VATTR_RETURN_VOID;
  })

/*
 * define attribute load
 */
VDEFATTR(load,"load",{
    vps_jzp_req* jreq;
    vps_inst* inst;
    vast_obj* obj;
    vast_obj* next;
    vcfg_graph* grp;

    ulog0("load");
    jreq = (vps_jzp_req*)req;
    
    if (!VATTR_CONTEXT_SUBR(jreq->parent)) {
      uabort("load inst can not use here!");
    }
    grp = (vcfg_graph*)jreq->parent;
    next = vast_cdr(jreq->ast_obj);
    if(!next){
      uabort("load inst have no operand!");
    }
    if(next->t != vastk_cons){
      uabort("load inst error!");
    }
    obj = vast_car(next);
    if (!obj) {
      uabort("load has no operand!");
    }
    if(obj->t == vastk_symbol){
      vast_symbol* sym = (vast_symbol*)obj;
      inst = vps_iloaddt(jreq->vps,sym->name);
    }else if(obj->t == vastk_integer){
      vast_integer* inte = (vast_integer*)obj;
      inst = vps_iloadimm(jreq->vps,inte->value);
    }else{
      uabort("load inst error!");
      inst = NULL;
    }
    vcfg_grp_inst_apd(grp,inst);
    VATTR_RETURN_VOID;
  })

/*
 * define attribute store
 */
VDEFATTR(store,"store",{
    vps_jzp_req* jreq;
    vps_inst* inst;
    vast_obj* obj;
    vast_obj* next;
    vcfg_graph* grp;

    ulog0("store");
    jreq = (vps_jzp_req*)req;
    
    if(!VATTR_CONTEXT_SUBR(jreq->parent)){
      uabort("store inst can not use here!");
    }
    grp = (vcfg_graph*)jreq->parent;
    next = vast_cdr(jreq->ast_obj);
    if(!next){
      uabort("store inst have no operand!");
    }
    if(next->t != vastk_cons){
      uabort("store inst error!");
    }
    obj = vast_car(next);
    if (!obj) {
      uabort("store has no operand!");
    }
    if(obj->t == vastk_symbol){
      vast_symbol* sym = (vast_symbol*)obj;
      inst = vps_istoredt(jreq->vps,sym->name);
    }else if(obj->t == vastk_integer){
      vast_integer* inte = (vast_integer*)obj;
      inst = vps_istoreimm(jreq->vps,inte->value);
    }else{
      uabort("store inst error!");      
      inst = NULL;
    }
    vcfg_grp_inst_apd(grp,inst);
    VATTR_RETURN_VOID;
  })

/*
 * define attribute push
 */
VDEFATTR(push,"push",{
    vps_jzp_req* jreq;
    vcfg_graph* grp;
    vps_inst* inst;
    vast_obj* obj;
    vast_obj* next;
    
    ulog0("push");
    jreq = (vps_jzp_req*)req;
    
    if(!VATTR_CONTEXT_SUBR(jreq->parent)){
      uabort("push inst can not use here!");
    }
    grp = (vcfg_graph*)jreq->parent;
    next = vast_cdr(jreq->ast_obj);
    if(!next){
      uabort("push inst have no operand!");
    }
    if(next->t != vastk_cons){
      uabort("push inst error!");
    }
    obj = vast_car(next);
    if (!obj) {
      uabort("push has no operand!");
    }
    if(obj->t == vastk_symbol){
      vast_symbol* sym = (vast_symbol*)obj;
      inst = vps_ipushdt(jreq->vps,grp,sym->name);
    }else if(obj->t == vastk_integer){
      vast_integer* inte = (vast_integer*)obj;
      inst = vps_ipushint(jreq->vps,grp,inte->name,inte->value);
    }else if(obj->t == vastk_number){
      vast_number* num = (vast_number*)obj;
      inst = vps_ipushnum(jreq->vps,grp,num->name,num->value);
    }else if(obj->t == vastk_string){
      vast_string* str = (vast_string*)obj;
      inst = vps_ipushstr(jreq->vps,grp,str->value);
    }else if(obj->t == vastk_character){
      vast_character* chara = (vast_character*)obj;
      inst = vps_ipushchar(jreq->vps,grp,chara->value);
    }else if(obj->t == vastk_keyword){
      vast_keyword* kw;

      kw = (vast_keyword*)obj;
      if (kw->kw.kw_type == lkw_nil) {
	inst = vps_ipushnil(jreq->vps,grp);
      } else {
	uabort("keyword not define!");
	inst = NULL;
      }
    } else if (obj->t == vastk_cons) {
      vps_jzp_req dreq;
      vast_obj* next;
      vast_symbol* sym;
      vast_attr* attr;
      vps_t* vps_obj;
      vps_type* type;

      next = obj;
      obj = vast_car(next);
      if (!obj || obj->t != vastk_symbol) {
	uabort("push arg error!");
      }
      dreq = vast_req_dbl(jreq);
      sym = (vast_symbol*)obj;
      attr = sym->attr;
      dreq.ast_obj = next;
      attr->action((vast_attr_req*)&dreq,res);
      if (res->res_type != var_apd) {
	uabort("push arg error!");
      }
      if (!res->res_obj) {
	uabort("push arg not a sizeof");
      }
      vps_obj = res->res_obj;
      if (vps_obj->t != vpsk_type) {
	uabort("push arg not a sizeof");
      }
      type = (vps_type*)vps_obj;

      inst = vps_ipushint(jreq->vps,grp,NULL,type->type_size);
    }else{
      uabort("push inst error!");
      inst = NULL;
    }
    vcfg_grp_inst_apd(grp,inst);
    VATTR_RETURN_VOID;
  })
/*
 * define attribute top
 */
VDEFATTR(top,"top",{
    vps_jzp_req* jreq;
    vps_inst* inst;
    vast_obj* obj;
    vast_obj* next;
    vcfg_graph* grp;
    
    ulog0("top");
    jreq = (vps_jzp_req*)req;
    
    if(!VATTR_CONTEXT_SUBR(jreq->parent)){
      uabort("top inst can not use here!");
    }
    grp = (vcfg_graph*)jreq->parent;
    next = vast_cdr(jreq->ast_obj);
    if(!next){
      uabort("top inst have no operand!");
    }
    if(next->t != vastk_cons){
      uabort("top inst error!");
    }
    obj = vast_car(next);
    if (!obj) {
      uabort("top has no operand!");
    }
    if(obj->t == vastk_integer){
      vast_integer* inte = (vast_integer*)obj;
      inst = vps_itop(jreq->vps,inte->value);
    }else{
      uabort("top inst error!");
      inst = NULL;
    }
    vcfg_grp_inst_apd(grp,inst);
    VATTR_RETURN_VOID;
  })

/*
 * define attribute pop
 */
VDEFATTR(pop,"pop",{
    vps_jzp_req* jreq;
    vcfg_graph* grp;
    vps_inst* inst;
    vast_obj* obj;
    vast_obj* next;

    ulog0("pop");
    jreq = (vps_jzp_req*)req;
    
    if(!VATTR_CONTEXT_SUBR(jreq->parent)){
      uabort("pop inst can not use here!");
    }
    grp = (vcfg_graph*)jreq->parent;
    next = vast_cdr(jreq->ast_obj);
    if (next) {
      if (next->t != vastk_cons) {
	uabort("top inst error!");
      }
      obj = vast_car(next);
      if (!obj) {
	uabort("top has no operand!");
      }
      if (obj->t == vastk_symbol) {
	vast_symbol* sym = (vast_symbol*)obj;
	inst = vps_ipopdt(jreq->vps,grp,sym->name);
      } else {
	uabort("pop inst error!");
	inst = NULL;
      }
    } else {
      inst = vps_ipopv(jreq->vps);
    }
    vcfg_grp_inst_apd(grp,inst);
    VATTR_RETURN_VOID;
  })

/*
 * define attribute add
 */
VDEFATTR(add,"add",{
    vps_jzp_req* jreq;
    vps_inst* inst;
    vcfg_graph* grp;

    ulog0("add");
    jreq = (vps_jzp_req*)req;
    
    if(!VATTR_CONTEXT_SUBR(jreq->parent)){
      uabort("add inst can not use here!");
    }
    grp = (vcfg_graph*)jreq->parent;
    inst = vps_iadd(jreq->vps);
    vcfg_grp_inst_apd(grp,inst);
    VATTR_RETURN_VOID;
  })

/*
 * define attribute sub
 */
VDEFATTR(sub,"sub",{
    vps_jzp_req* jreq;
    vps_inst* inst;
    vcfg_graph* grp;
    
    ulog0("sub");
    jreq = (vps_jzp_req*)req;
    
    if(!VATTR_CONTEXT_SUBR(jreq->parent)){
      uabort("sub inst can not use here!");
    }
    grp = (vcfg_graph*)jreq->parent;
    inst = vps_isub(jreq->vps);
    vcfg_grp_inst_apd(grp,inst);
    VATTR_RETURN_VOID;
  })

/*
 * define attribute mul
 */
VDEFATTR(mul,"mul",{
    vps_jzp_req* jreq;
    vps_inst* inst;
    vcfg_graph* grp;
    
    ulog0("mul");
    jreq = (vps_jzp_req*)req;

    if(!VATTR_CONTEXT_SUBR(jreq->parent)){
      uabort("mul inst can not use here!");
    }
    grp = (vcfg_graph*)jreq->parent;
    inst = vps_imul(jreq->vps);
    vcfg_grp_inst_apd(grp,inst);
    VATTR_RETURN_VOID;
  })

/*
 * define attribute div
 */
VDEFATTR(div,"div",{
    vps_jzp_req* jreq;
    vps_inst* inst;
    vcfg_graph* grp;
    
    ulog0("div");
    jreq = (vps_jzp_req*)req;
    
    if(!VATTR_CONTEXT_SUBR(jreq->parent)){
      uabort("div inst can not use here!");
    }
    grp = (vcfg_graph*)jreq->parent;
    inst = vps_idiv(jreq->vps);
    vcfg_grp_inst_apd(grp,inst);
    VATTR_RETURN_VOID;
  })

/*
 * define attribute jmpi
 */
VDEFATTR(jmpi,"jmpi",{
    vps_jzp_req* jreq;
    vps_inst* inst;
    vast_obj* obj;
    vast_obj* next;
    vcfg_graph* grp;

    ulog0("jmpi");
    jreq = (vps_jzp_req*)req;
    
    if(!VATTR_CONTEXT_SUBR(jreq->parent)){
      uabort("jmpi inst can not use here!");
    }
    grp = (vcfg_graph*)jreq->parent;
    next = vast_cdr(jreq->ast_obj);
    if(!next){
      uabort("jmpi inst have no operand!");
    }
    if(next->t != vastk_cons){
      uabort("jmpi inst error!");
    }
    obj = vast_car(next);
    if (!obj) {
      uabort("jmpi has no operand!");
    }
    if(obj->t == vastk_symbol){
      vast_symbol* symbol = (vast_symbol*)obj;
      inst = vps_ijmpilb(jreq->vps,symbol->name);
    }else if(obj->t == vastk_integer){
      vast_integer* inte = (vast_integer*)obj;
      inst = vps_ijmpiimm(jreq->vps,inte->value);
    }else{
      uabort("jmpi inst error!");
      inst = NULL;
    }
    vcfg_grp_inst_apd(grp,inst);
    VATTR_RETURN_VOID;
  })

/*
 * define attribute jmp
 */
VDEFATTR(jmp,"jmp",{
    vps_jzp_req* jreq;
    vps_inst* inst;
    vast_obj* obj;
    vast_obj* next;
    vcfg_graph* grp;

    ulog0("jmp");
    jreq = (vps_jzp_req*)req;
    
    if(!VATTR_CONTEXT_SUBR(jreq->parent)){
      uabort("jmp inst can not use here!");
    }
    grp = (vcfg_graph*)jreq->parent;
    next = vast_cdr(jreq->ast_obj);
    if(!next){
      uabort("jmp inst have no operand!");
    }
    if(next->t != vastk_cons){
      uabort("jmp inst error!");
    }
    obj = vast_car(next);
    if (!obj) {
      uabort("jmp has no operand!");
    }
    if(obj->t == vastk_symbol){
      vast_symbol* symbol = (vast_symbol*)obj;
      inst = vps_ijmplb(jreq->vps,symbol->name);
    }else if(obj->t == vastk_integer){
      vast_integer* inte = (vast_integer*)obj;
      inst = vps_ijmpimm(jreq->vps,inte->value);
    }else{
      uabort("jmp inst error!");
      inst = NULL;
    }
    vcfg_grp_inst_apd(grp,inst);
    VATTR_RETURN_VOID;
  })

/*
 * define attribute eq
 */
VDEFATTR(eq,"eq",{
    vps_jzp_req* jreq;
    vps_inst* inst;
    vcfg_graph* grp;

    ulog0("eq");
    jreq = (vps_jzp_req*)req;
    
    if(!VATTR_CONTEXT_SUBR(jreq->parent)){
      uabort("eq inst can not use here!");
    }
    grp = (vcfg_graph*)jreq->parent;
    inst = vps_ieq(jreq->vps);
    vcfg_grp_inst_apd(grp,inst);
    VATTR_RETURN_VOID;
  })

/*
 * define attribute gt
 */
VDEFATTR(gt,"gt",{
    vps_jzp_req* jreq;
    vps_inst* inst;
    vcfg_graph* grp;

    ulog0("gt");
    jreq = (vps_jzp_req*)req;
    
    if(!VATTR_CONTEXT_SUBR(jreq->parent)){
      uabort("gt inst can not use here!");
    }
    grp = (vcfg_graph*)jreq->parent;
    inst = vps_igt(jreq->vps);
    vcfg_grp_inst_apd(grp,inst);
    VATTR_RETURN_VOID;
  })

/*
 * define attribute lt
 */
VDEFATTR(lt,"lt",{
    vps_jzp_req* jreq;
    vps_inst* inst;
    vcfg_graph* grp;

    ulog0("lt");
    jreq = (vps_jzp_req*)req;
    
    if(!VATTR_CONTEXT_SUBR(jreq->parent)){
      uabort("lt inst can not use here!");
    }
    grp = (vcfg_graph*)jreq->parent;
    inst = vps_ilt(jreq->vps);
    vcfg_grp_inst_apd(grp,inst);
    VATTR_RETURN_VOID;
  })

/*
 * define attribute and
 */
VDEFATTR(and,"and",{
    vps_jzp_req* jreq;
    vps_inst* inst;
    vcfg_graph* grp;

    ulog0("and");
    jreq = (vps_jzp_req*)req;
    
    if(!VATTR_CONTEXT_SUBR(jreq->parent)){
      uabort("and inst can not use here!");
    }
    grp = (vcfg_graph*)jreq->parent;
    inst = vps_iand(jreq->vps);
    vcfg_grp_inst_apd(grp,inst);
    VATTR_RETURN_VOID;
  })

/*
 * define attribute or
 */
VDEFATTR(or,"or",{
    vps_jzp_req* jreq;
    vps_inst* inst;
    vcfg_graph* grp;

    ulog0("or");
    jreq = (vps_jzp_req*)req;
    
    if(!VATTR_CONTEXT_SUBR(jreq->parent)){
      uabort("or inst can not use here!");
    }
    grp = (vcfg_graph*)jreq->parent;
    inst = vps_ior(jreq->vps);
    vcfg_grp_inst_apd(grp,inst);
    VATTR_RETURN_VOID;
  })

/*
 * define attribute not
 */
VDEFATTR(not,"not",{
    vps_jzp_req* jreq;
    vps_inst* inst;
    vcfg_graph* grp;

    ulog0("not");
    jreq = (vps_jzp_req*)req;
    
    if(!VATTR_CONTEXT_SUBR(jreq->parent)){
      uabort("not inst can not use here!");
    }
    grp = (vcfg_graph*)jreq->parent;
    inst = vps_inot(jreq->vps);
    vcfg_grp_inst_apd(grp,inst);
    VATTR_RETURN_VOID;
  })

/*
 * define attribute call
 */
VDEFATTR(call,"call",{
    vps_jzp_req* jreq;
    vps_inst* inst;
    vcfg_graph* grp;

    ulog0("call");
    jreq = (vps_jzp_req*)req;
    
    if(!VATTR_CONTEXT_SUBR(jreq->parent)){
      uabort("call inst can not use here!");
    }
    grp = (vcfg_graph*)jreq->parent;
    inst = vps_icall(jreq->vps);
    vcfg_grp_inst_apd(grp,inst);
    VATTR_RETURN_VOID;
  })

/*
 * define attribute return
 */
VDEFATTR(return,"return",{
    vps_jzp_req* jreq;
    vps_inst* inst;
    vcfg_graph* grp;

    ulog0("return");
    jreq = (vps_jzp_req*)req;
    
    if(!VATTR_CONTEXT_SUBR(jreq->parent)){
      uabort("return inst can not use here!");
    }
    grp = (vcfg_graph*)jreq->parent;
    inst = vps_ireturn(jreq->vps);
    vcfg_grp_inst_apd(grp,inst);
    VATTR_RETURN_VOID;
  })

/*
 * define attribute retvoid
 */
VDEFATTR(retvoid,"retvoid",{
    vps_jzp_req* jreq;
    vps_inst* inst;
    vcfg_graph* grp;

    ulog0("retvoid");
    jreq = (vps_jzp_req*)req;
    
    if(!VATTR_CONTEXT_SUBR(jreq->parent)){
      uabort("retvoid inst can not use here!");
    }
    grp = (vcfg_graph*)jreq->parent;
    inst = vps_iretvoid(jreq->vps);
    vcfg_grp_inst_apd(grp,inst);
    VATTR_RETURN_VOID;
  })

/*
 * define attribute ref
 */
VDEFATTR(ref,"ref",{
    vps_jzp_req* jreq;
    vps_inst* inst;
    vast_obj* obj;
    vast_obj* next;
    vcfg_graph* grp;

    ulog0("ref");
    jreq = (vps_jzp_req*)req;
    
    if(!VATTR_CONTEXT_SUBR(jreq->parent)){
      uabort("ref inst can not use here!");
    }
    grp = (vcfg_graph*)jreq->parent;
    next = vast_cdr(jreq->ast_obj);
    if(!next){
      uabort("ref inst have no operand!");
    }
    if(next->t != vastk_cons){
      uabort("ref inst error!");
    }
    obj = vast_car(next);
    if (!obj) {
      uabort("ref has no operand!");
    }
    if(obj->t == vastk_symbol){
      vast_symbol* sym = (vast_symbol*)obj;
      inst = vps_irefdt(jreq->vps,sym->name);
    }else if(obj->t == vastk_integer){
      vast_integer* inte = (vast_integer*)obj;
      inst = vps_irefimm(jreq->vps,inte->value);
    } else if (obj->t == vastk_cons) {
      vps_jzp_req dreq;
      vast_obj* next;
      vast_symbol* sym;
      vast_attr* attr;
      vps_t* vps_obj;
      vps_type* type;

      next = obj;
      obj = vast_car(next);
      if (!obj || obj->t != vastk_symbol) {
	uabort("ref arg error!");
      }
      dreq = vast_req_dbl(jreq);
      sym = (vast_symbol*)obj;
      attr = sym->attr;
      dreq.ast_obj = next;
      attr->action((vast_attr_req*)&dreq,res);
      if (res->res_type != var_apd) {
	uabort("ref arg error!");
      }
      if (!res->res_obj) {
	uabort("ref arg not a indexof");
      }
      vps_obj = res->res_obj;
      if (vps_obj->t != vpsk_type) {
	uabort("ref arg not a indexof");
      }
      type = (vps_type*)vps_obj;

      inst = vps_irefimm(jreq->vps,type->type_index);
    }else{
      uabort("ref inst error!");
      inst = NULL;
    }
    vcfg_grp_inst_apd(grp,inst);
    VATTR_RETURN_VOID;
  })

/*
 * define attribute set
 */
VDEFATTR(set,"set",{
    vps_jzp_req* jreq;
    vps_inst* inst;
    vast_obj* obj;
    vast_obj* next;
    vcfg_graph* grp;

    ulog0("set");
    jreq = (vps_jzp_req*)req;
    
    if(!VATTR_CONTEXT_SUBR(jreq->parent)){
      uabort("set inst can not use here!");
    }
    grp = (vcfg_graph*)jreq->parent;
    next = vast_cdr(jreq->ast_obj);
    if(!next){
      uabort("set inst have no operand!");
    }
    if(next->t != vastk_cons){
      uabort("set inst error!");
    }
    obj = vast_car(next);
    if (!obj) {
      uabort("set has no operand!");
    }
    if(obj->t == vastk_symbol){
      vast_symbol* sym = (vast_symbol*)obj;
      inst = vps_isetdt(jreq->vps,sym->name);
    }else if(obj->t == vastk_integer){
      vast_integer* inte = (vast_integer*)obj;
      inst = vps_isetimm(jreq->vps,inte->value);
    } else if (obj->t == vastk_cons) {
      vps_jzp_req dreq;
      vast_obj* next;
      vast_symbol* sym;
      vast_attr* attr;
      vps_t* vps_obj;
      vps_type* type;

      next = obj;
      obj = vast_car(next);
      if (!obj || obj->t != vastk_symbol) {
	uabort("set arg error!");
      }
      dreq = vast_req_dbl(jreq);
      sym = (vast_symbol*)obj;
      attr = sym->attr;
      dreq.ast_obj = next;
      attr->action((vast_attr_req*)&dreq,res);
      if (res->res_type != var_apd) {
	uabort("set arg error!");
      }
      if (!res->res_obj) {
	uabort("set arg not a indexof");
      }
      vps_obj = res->res_obj;
      if (vps_obj->t != vpsk_type) {
	uabort("set arg not a indexof");
      }
      type = (vps_type*)vps_obj;

      inst = vps_isetimm(jreq->vps,type->type_index);
    }else{
      uabort("set inst error!");
      inst = NULL;
    }
    vcfg_grp_inst_apd(grp,inst);
    VATTR_RETURN_VOID;
  })

/*
 * define attribute label
 */
VDEFATTR(label,"label",{
    vps_jzp_req* jreq;
    vps_inst* inst;
    vast_obj* obj;
    vast_obj* next;
    vcfg_graph* grp;

    ulog0("label");
    jreq = (vps_jzp_req*)req;
    
    if(!VATTR_CONTEXT_SUBR(jreq->parent)){
      uabort("label inst can not use here!");
    }
    grp = (vcfg_graph*)jreq->parent;
    next = vast_cdr(jreq->ast_obj);
    if(!next){
      uabort("label inst have no operand!");
    }
    if(next->t != vastk_cons){
      uabort("label inst error!");
    }
    obj = vast_car(next);
    if (!obj) {
      uabort("label has no operand!");
    }
    if (obj->t == vastk_symbol) {
      vast_symbol* symbol = (vast_symbol*)obj;
      inst = vps_ilabel(jreq->vps,symbol->name);
    } else {
      uabort("label inst error!");
      inst = NULL;
    }
    vcfg_grp_inst_apd(grp,inst);
    VATTR_RETURN_VOID;
  })

/*
 * define attribute nop
 */
VDEFATTR(nop,"nop",{
    vps_jzp_req* jreq;
    vps_inst* inst;
    vcfg_graph* grp;

    ulog0("nop");
    jreq = (vps_jzp_req*)req;
    
    if (!VATTR_CONTEXT_SUBR(jreq->parent)) {
      uabort("nop inst can not use here!");
    }
    grp = (vcfg_graph*)jreq->parent;
    inst = vps_inop(jreq->vps);
    vcfg_grp_inst_apd(grp,inst);
    VATTR_RETURN_VOID;
  })

/*
 * declare attribute
 */
VATTRONLOAD(l3base,{
    VDECLATTR(g_subr);
    VDECLATTR(subr);
    VDECLATTR(g_var);
    VDECLATTR(var);
    VDECLATTR(local);
    VDECLATTR(nop);
    VDECLATTR(load);
    VDECLATTR(store);
    VDECLATTR(push);
    VDECLATTR(top);
    VDECLATTR(pop);
    VDECLATTR(jmp);
    VDECLATTR(jmpi);
    VDECLATTR(eq);
    VDECLATTR(gt);
    VDECLATTR(lt);
    VDECLATTR(and);
    VDECLATTR(or);
    VDECLATTR(not);
    VDECLATTR(add);
    VDECLATTR(sub);
    VDECLATTR(mul);
    VDECLATTR(div);
    VDECLATTR(call);
    VDECLATTR(return);
    VDECLATTR(retvoid);
    VDECLATTR(ref);
    VDECLATTR(set);
    VDECLATTR(label);
  })
