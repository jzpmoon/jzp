/*
 * define attribute g-struct
 */
VDEFATTR(g_struct,"g-struct",{
    vps_cntr* vps;
    vps_mod* top;
    vast_obj* next;
    vast_obj* obj;
    vast_obj* struct_members;
    vast_symbol* struct_name;
    vps_type* struct_type;
    int count;

    vps = req->vps;
    top = req->top;
    if (!VATTR_CONTEXT_FILE(req->parent)) {
      uabort("src-load inst can not use here!");
    }

    next = vast_cdr(req->ast_obj);
    if(!next || next->t != vastk_cons){
      uabort("struct error!");
    }
    obj = vast_car(next);
    if(!obj || obj->t != vastk_symbol){
      uabort("struct name invalid!");
    }
    struct_name = (vast_symbol*)obj;
    next = vast_cdr(next);
    if(!next || next->t != vastk_cons){
      uabort("struct error!");
    }
    obj = vast_car(next);
    if (!obj || obj->t != vastk_cons) {
      uabort("struct member has no declare!");
    }
    struct_members = obj;
    count = 0;
    while (struct_members) {
      vast_obj* member;
      vast_symbol* member_name;
      ustring* type_name;
      vps_type* type;
      
      member = vast_car(struct_members);
      if (!member || member->t != vastk_symbol) {
	uabort("member not a symbol!");
      }
      member_name = (vast_symbol*)member;
      type_name = ustring_concatx(struct_name->name,member_name->name,".");
      if (!type_name) {
	uabort("string concatx error!");
      }
      type = vps_type_new(vps,type_name,1,count);
      if (!type) {
	uabort("new vps_type error!");
      }

      vps_ltype_put(top,type);
      vps_gtype_put(vps,type);
      struct_members = vast_cdr(struct_members);
      count++;
    }
    struct_type = vps_type_new(vps,struct_name->name,count,-1);
    if (!struct_type) {
      uabort("new vps_type error!");
    }
    vps_ltype_put(top,struct_type);
    vps_gtype_put(vps,struct_type);
    
    ulog("attr struct");
    VATTR_RETURN_VOID;
  })

/*
 * define attribute struct
 */
VDEFATTR(struct,"struct",{
    vps_cntr* vps;
    vps_mod* top;
    vast_obj* next;
    vast_obj* obj;
    vast_obj* struct_members;
    vast_symbol* struct_name;
    vps_type* struct_type;
    int count;

    vps = req->vps;
    top = req->top;
    if (!VATTR_CONTEXT_FILE(req->parent)) {
      uabort("src-load inst can not use here!");
    }

    next = vast_cdr(req->ast_obj);
    if(!next || next->t != vastk_cons){
      uabort("struct error!");
    }
    obj = vast_car(next);
    if(!obj || obj->t != vastk_symbol){
      uabort("struct name invalid!");
    }
    struct_name = (vast_symbol*)obj;
    next = vast_cdr(next);
    if(!next || next->t != vastk_cons){
      uabort("struct error!");
    }
    obj = vast_car(next);
    if (!obj || obj->t != vastk_cons) {
      uabort("struct member has no declare!");
    }
    struct_members = obj;
    count = 0;
    while (struct_members) {
      vast_obj* member;
      vast_symbol* member_name;
      ustring* type_name;
      vps_type* type;
      
      member = vast_car(struct_members);
      if (!member || member->t != vastk_symbol) {
	uabort("member not a symbol!");
      }
      member_name = (vast_symbol*)member;
      type_name = ustring_concatx(struct_name->name,member_name->name,".");
      if (!type_name) {
	uabort("string concatx error!");
      }
      type = vps_type_new(vps,type_name,1,count);
      if (!type) {
	uabort("new vps_type error!");
      }

      vps_ltype_put(top,type);
      struct_members = vast_cdr(struct_members);
      count++;
    }
    struct_type = vps_type_new(vps,struct_name->name,count,-1);
    if (!struct_type) {
      uabort("new vps_type error!");
    }
    vps_ltype_put(top,struct_type);
    
    ulog("attr struct");
    VATTR_RETURN_VOID;
  })

/*
 * define attribute sizeof
 */
VDEFATTR(sizeof,"sizeof",{
    vast_obj* next;
    vast_obj* obj;
    vast_symbol* type_name;
    vps_type* type;
    
    next = vast_cdr(req->ast_obj);
    if(!next || next->t != vastk_cons){
      uabort("sizeof error!");
    }
    obj = vast_car(next);
    if (!obj || obj->t != vastk_symbol) {
      uabort("sizeof arg not a symbol!");
    }
    type_name = (vast_symbol*)obj;
    
    type = vps_type_get(req->top,type_name->name);
    if (!type) {
      uabort("struct undefine!");
    }
    VATTR_RETURN(var_vps_apd,type);
  })

/*
 * define attribute indexof
 */
VDEFATTR(indexof,"indexof",{
    vast_obj* next;
    vast_obj* obj;
    vast_symbol* type_name;
    vps_type* type;
    
    next = vast_cdr(req->ast_obj);
    if(!next || next->t != vastk_cons){
      uabort("indexof error!");
    }
    obj = vast_car(next);
    if (!obj || obj->t != vastk_symbol) {
      uabort("indexof arg not a symbol!");
    }
    type_name = (vast_symbol*)obj;

    type = vps_type_get(req->top,type_name->name);
    if (!type) {
      uabort("struct member undefine!");
    }
    VATTR_RETURN(var_vps_apd,type);    
  })

/*
 * declare attribute
 */
VATTRONLOAD(proc,{
    VDECLATTR(g_struct);
    VDECLATTR(struct);
    VDECLATTR(sizeof);
    VDECLATTR(indexof);
})
