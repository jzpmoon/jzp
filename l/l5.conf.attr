/*
 * define attribute lib-path
 * (lib-path path)
 */
VDEFATTR(lib_path,"lib-path",{
  vast_obj* next;
  vast_obj* obj;

  next = vast_cdr(req->ast_obj);
  if (vast_consp(next)) {
    uabort("lib-path has no args!");
  }
  obj = vast_car(next);
  if (vast_symbolp(obj)) {
    uabort("lib-path not a symbol!");
  }
  
  VATTR_RETURN(var_apd,obj);
})

/*
 * define attribute init-cfun
 * (init-cfun cfun-name)
 */
VDEFATTR(init_cfun,"init-cfun",{
  vast_obj* next;
  vast_obj* obj;

  next = vast_cdr(req->ast_obj);
  if (vast_consp(next)) {
    uabort("init_cfun has no args!");
  }
  obj = vast_car(next);
  if (vast_symbolp(obj)) {
    uabort("init_cfun not a symbol!");
  }
  
  VATTR_RETURN(var_apd,obj);
})

/*
 * define attribute sys-lib-bin-load
 * (sys-lib-bin-load lib-name)
 */
VDEFATTR(sys_lib_bin_load,"sys-lib-bin-load",{
    vast_conf_req* creq;
    l5eval* eval;
    vast_obj* next;
    vast_obj* obj;
    vast_obj* opt;
    vast_conf_req dreq;
    vast_symbol* opt_name;
    vast_symbol* lib_path;
    vast_symbol* init_cfun;
    ulib handle;
    lmod_init_ft callback;
    int retval;
    vmod* mod;

    creq = (vast_conf_req*)req;
    eval = (l5eval*)creq->eval;
    dreq = vast_req_dbl(creq);
    next = creq->ast_obj;
    while (1) {
      next = vast_cdr(next);
      if (!next) {
	break;
      }
      opt = vast_car(next);
      if (vast_consp(opt)) {
	uabort("has no options!");
      }
      obj = vast_car(opt);
      if (vast_symbolp(obj)) {
	uabort("option name not a symbol!");
      }
      opt_name = (vast_symbol*)obj;
      dreq.ast_obj = opt;
      if (vast_attr_of(opt_name->attr,lib_path)) {
	retval = vast_attr_call(opt_name->attr,(vast_attr_req*)&dreq,res);
	if (retval != 1) {
	  uabort("option error!");
	}
	lib_path = (vast_symbol*)res->res_obj;
      } else if (vast_attr_of(opt_name->attr,init_cfun)) {
	retval = vast_attr_call(opt_name->attr,(vast_attr_req*)&dreq,res);
	if (retval != 1) {
	  uabort("option error!");
	}
        init_cfun = (vast_symbol*)res->res_obj;
      } else {
	uabort("unknow options!");
      }
    }
    /* try to init mod */
    if (!lib_path) {
      uabort("lib path not define!");
    }
    handle = udlopen(lib_path->name,URTLD_LAZY);
    if (!handle) {
      uabort("open lib error:%s,%d!",udlerrorstr(),udlerrorcode());
    }
    if (!init_cfun) {
      uabort("init cfun not define!");
    }
    callback = (lmod_init_ft)udlsym(handle,init_cfun->name);
    if (!callback) {
      uabort("get lib symbol error:%s,%d!",udlerrorstr(),udlerrorcode());
    }
    mod = vcontext_mod_add(eval->base_eval->ctx,lib_path->name,
			   lib_path->name);
    callback(eval->base_eval->ctx,mod);
    vmod_loaded(mod);
    VATTR_RETURN_VOID;
})

/*
 * define attribute sys-lib-src-load
 * (sys-lib-src-load lib-name)
 */
VDEFATTR(sys_lib_src_decl,"sys-lib-src-load",{
    vast_conf_req* creq;
    l5eval* eval;
    vast_obj* next;
    vast_obj* obj;
    vast_obj* opt;
    vast_conf_req dreq;
    vast_symbol* opt_name;
    vast_symbol* lib_path;
    int retval;
    
    creq = (vast_conf_req*)req;
    eval = (l5eval*)creq->eval;
    dreq = vast_req_dbl(creq);
    next = creq->ast_obj;
    while (1) {
      next = vast_cdr(next);
      if (!next) {
	break;
      }
      opt = vast_car(next);
      if (vast_consp(opt)) {
	uabort("has no options!");
      }
      obj = vast_car(opt);
      if (vast_symbolp(obj)) {
	uabort("option name not a symbol!");
      }
      opt_name = (vast_symbol*)obj;
      dreq.ast_obj = opt;
      if (vast_attr_of(opt_name->attr,lib_path)) {
	retval = vast_attr_call(opt_name->attr,(vast_attr_req*)&dreq,res);
	if (retval != 1) {
	  uabort("option error!");
	}
	lib_path = (vast_symbol*)res->res_obj;
      } else {
	uabort("unknow options!");
      }
    }
    /* load source library */
    if (!lib_path) {
      uabort("lib path not define!");
    }
    l5eval_lib_load(eval,lib_path->name->value);
  VATTR_RETURN_VOID;
})

/*
 * define attribute log-name
 * (log-name ...)
 */
VDEFATTR(log_name,"log-name",{
  vast_obj* next;
  vast_obj* obj;

  next = vast_cdr(req->ast_obj);
  if (vast_consp(next)) {
    uabort("log-name has no args!");
  }
  obj = vast_car(next);
  if (vast_symbolp(obj)) {
    uabort("log-name not a symbol!");
  }
  
  VATTR_RETURN(var_apd,obj);
})

/*
 * define attribute log-enable
 * (log-enable ...)
 */
VDEFATTR(log_enable,"log-enable",{
  vast_obj* next;
  vast_obj* obj;

  next = vast_cdr(req->ast_obj);
  if (vast_consp(next)) {
    uabort("log-enable has no args!");
  }
  obj = vast_car(next);
  if (vast_integerp(obj)) {
    uabort("log-enable not a integer!");
  }
  
  VATTR_RETURN(var_apd,obj);
})

/*
 * define attribute log-max-line
 * (log-max-line ...)
 */
VDEFATTR(log_max_line,"log-max-line",{
  vast_obj* next;
  vast_obj* obj;

  next = vast_cdr(req->ast_obj);
  if (vast_consp(next)) {
    uabort("log-max-line has no args!");
  }
  obj = vast_car(next);
  if (vast_integerp(obj)) {
    uabort("log-max-line not a integer!");
  }
  
  VATTR_RETURN(var_apd,obj);
})

/*
 * define attribute sys-log
 * (sys-log ...)
 */
VDEFATTR(sys_log,"sys-log",{
    vast_conf_req* creq;
    l5eval* eval;
    vast_obj* next;
    vast_obj* obj;
    vast_obj* opt;
    vast_conf_req dreq;
    vast_symbol* opt_name;
    vast_symbol* log_name;
    vast_integer* log_enable;
    vast_integer* log_max_line;
    static ulog_conf log_conf;
    int retval;
    
    creq = (vast_conf_req*)req;
    eval = (l5eval*)creq->eval;
    dreq = vast_req_dbl(creq);
    next = creq->ast_obj;
    while (1) {
      next = vast_cdr(next);
      if (!next) {
	break;
      }
      opt = vast_car(next);
      if (vast_consp(opt)) {
	uabort("has no options!");
      }
      obj = vast_car(opt);
      if (vast_symbolp(obj)) {
	uabort("option name not a symbol!");
      }
      opt_name = (vast_symbol*)obj;
      dreq.ast_obj = opt;
      if (vast_attr_of(opt_name->attr,log_name)) {
	retval = vast_attr_call(opt_name->attr,(vast_attr_req*)&dreq,res);
	if (retval != 1) {
	  uabort("option error!");
	}
	log_name = (vast_symbol*)res->res_obj;
      } else if (vast_attr_of(opt_name->attr,log_enable)) {
	retval = vast_attr_call(opt_name->attr,(vast_attr_req*)&dreq,res);
	if (retval != 1) {
	  uabort("option error!");
	}
	log_enable = (vast_integer*)res->res_obj;
      } else if (vast_attr_of(opt_name->attr,log_max_line)) {
	retval = vast_attr_call(opt_name->attr,(vast_attr_req*)&dreq,res);
	if (retval != 1) {
	  uabort("option error!");
	}
	log_max_line = (vast_integer*)res->res_obj;
      } else {
	uabort("unknow options!");
      }
    }
    
    if (log_name) {
      log_conf.log_fn = log_name->name->value;
    } else {
      log_conf.log_fn = "jzpl.log";
    }
    if (log_enable && log_enable->value) {
      log_conf.power = UTRUE;
    } else {
      log_conf.power = UFALSE;
    }
    if (log_max_line) {
      log_conf.line = log_max_line->value;
    } else {
      log_conf.line = -1;
    }
    ulog_init(&log_conf);
    
    VATTR_RETURN_VOID;
})

/*
 * declare attribute
 */
VATTRONLOAD(l5_conf,{
    VDECLATTR(sys_lib_bin_load);
    VDECLATTR(sys_lib_src_decl);
    VDECLATTR(lib_path);
    VDECLATTR(init_cfun);
    VDECLATTR(sys_log);
    VDECLATTR(log_name);
    VDECLATTR(log_enable);
    VDECLATTR(log_max_line);
})
