/*
 * define attribute defun
 * (defun (args...) (body)...)
 */
VDEFATTR(defun,"defun",{
    vps_closure_req* jreq;
    vclosure* closure;
    vast_obj* obj;
    vast_obj* next;
    vast_symbol* fun_name;
    vcfg_graph* grp;
    vast_obj* args;
    vps_inst* inst;

    jreq = (vps_closure_req*)req;

    closure = vclosure_new(jreq->vps);
    if (!closure) {
      uabort("new closure error!");
    }
    closure->parent = jreq->closure;
    grp = closure->init;
    grp->scope = VPS_SCOPE_GLOBAL;

    next = vast_cdr(jreq->ast_obj);
    if (vast_consp(next)) {
      uabort("not define funcion name!");
    }
    obj = vast_car(next);
    if (vast_symbolp(obj)) {
      uabort("has no function name!");
    }
    fun_name = (vast_symbol*)obj;

    grp->id.name = fun_name->name;
    
    next = vast_cdr(next);
    if (vast_consp(next)) {
      uabort("defun args error!");
    }

    /* (args...) */
    obj = vast_car(next);
    if (obj) {
      int arg_idx = 0;
      if (vast_consp(obj)) {
	uabort("defun args invalid!");
      }
      args = obj;
      while (args != NULL) {
	vast_obj* arg;
	vast_symbol* sym;
	vps_data* data;

	arg = vast_car(args);
	if (vast_symbolp(arg)) {
	  uabort("arg not a symbol!");
	}
	sym = (vast_symbol*)arg;
	data = vps_any_new(jreq->vps,sym->name);
	if (!data) {
	  uabort("vps_any_new error!");
	}
	data->idx = arg_idx;
	data->scope = VPS_SCOPE_LOCAL;
	vcfg_grp_params_apd(grp,data);
	args = vast_cdr(args);
	arg_idx++;
      }
    }
    
    /* function body sequence
     * (body)...              */
    next = vast_cdr(next);
    while (next) {
      if (vast_consp(next)) {
	uabort("defun body not a cons!");
      }
      obj = vast_car(next);
      if (vast_consp(obj)) {
	uabort("defun body not a cons!");
      }
      vclosure_cons_call(closure,jreq,obj);
      next = vast_cdr(next);
    }
    
    inst = vps_ireturn(jreq->vps);
    vcfg_grp_inst_apd(grp,inst);
    vcfg_grp_build(jreq->vps,grp);
    vcfg_grp_connect(jreq->vps,grp);

    if (vclosure_child_add(jreq->closure,closure)) {
      uabort("add child closure error!");
    }

    VATTR_RETURN_VOID;
  })

/*
 * define attribute if
 * (if (cond) (then) (else))
 */
VDEFATTR(if,"if",{
    vps_closure_req* jreq;
    vast_obj* obj;
    vast_obj* next;
    vps_inst* inst;
    vcfg_graph* grp;
    vps_id then_id;
    vps_id else_id;
    vps_id exit_id;

    jreq = (vps_closure_req*)req;
    grp = jreq->closure->init;

    then_id = vps_id_get(jreq->vps,NULL);
    else_id = vps_id_get(jreq->vps,NULL);
    exit_id = vps_id_get(jreq->vps,NULL);
    
    /* (cond...) */
    next = vast_cdr(jreq->ast_obj);
    if (vast_consp(next)) {
      uabort("ast attr \"if\" has no cond!");
    }
    obj = vast_car(next);
    if (vast_consp(obj)) {
      uabort("ast attr \"if\" cond has no ()!");
    }
    vclosure_cons_call(jreq->closure,jreq,obj);
    
    inst = vps_ijmpilb(jreq->vps,then_id);
    vcfg_grp_inst_apd(grp,inst);
    inst = vps_ijmplb(jreq->vps,else_id);
    vcfg_grp_inst_apd(grp,inst);
    
    /* (then...) */
    inst = vps_ilabel(jreq->vps,then_id);
    vcfg_grp_inst_apd(grp,inst);
    
    next = vast_cdr(next);
    if (vast_consp(next)) {
      uabort("ast attr \"if\" has no then!");
    }
    obj = vast_car(next);
    if (vast_consp(obj)) {
      uabort("ast attr \"if\" then has no ()!");
    }
    vclosure_cons_call(jreq->closure,jreq,obj);
    
    inst = vps_ijmplb(jreq->vps,exit_id);
    vcfg_grp_inst_apd(grp,inst);
    
    /* (else...) */
    inst = vps_ilabel(jreq->vps,else_id);
    vcfg_grp_inst_apd(grp,inst);

    next = vast_cdr(next);
    if (vast_consp(next)) {
      uabort("ast attr \"if\" has no else!");
    }
    obj = vast_car(next);
    if (vast_consp(obj)) {
      uabort("ast attr \"if\" else has no ()!");
    }
    vclosure_cons_call(jreq->closure,jreq,obj);

    inst = vps_ilabel(jreq->vps,exit_id);
    vcfg_grp_inst_apd(grp,inst);
    
    VATTR_RETURN_VOID;
  })

/*
 * define attribute add
 * (+ num...)
 */
VDEFATTR(add,"+",{
    vps_closure_req* jreq;
    vast_obj* obj;
    vast_obj* next;
    vps_inst* inst;
    vcfg_graph* grp;
    int argc = 0;

    jreq = (vps_closure_req*)req;
    grp = jreq->closure->init;
    next = vast_cdr(jreq->ast_obj);
    while (1) {
      if (!next) {
	if (argc < 2) {
	  uabort("attr \"+\" args less than 2!");
	}
	break;
      }
      obj = vast_car(next);
      if (!vast_numberp(obj)) {
	vast_number* num = (vast_number*)obj;
	inst = vps_ipushnum(jreq->vps,grp,num->name,num->value);
      } else if (!vast_integerp(obj)) {
	vast_integer* inte = (vast_integer*)obj;
	inst = vps_ipushint(jreq->vps,grp,inte->name,inte->value);
      } else if (!vast_symbolp(obj)) {
	vast_symbol* sym = (vast_symbol*)obj;
	vps_data* data = vclosure_field_get(jreq->closure,sym->name);
	if (!data) {
	  uabort("variable:%s,not define!",sym->name->value);
	}
	if (data->scope == VPS_SCOPE_LOCAL) {
	  inst = vps_iloaddt(jreq->vps,sym->name);
	} else if (data->scope == VPS_SCOPE_GLOBAL) {
	  inst = vps_ipushdt(jreq->vps,grp,sym->name);
	} else {
	  uabort("variable:%s,scope error!",sym->name->value);
	}
      } else {
	uabort("added not a number or symbol!");
      }
      vcfg_grp_inst_apd(grp,inst);
      if (argc > 0) {
	inst = vps_iadd(jreq->vps);
	vcfg_grp_inst_apd(grp,inst);
      }
      argc++;
      next = vast_cdr(next);
    }
    
    VATTR_RETURN_VOID;
  })

/*
 * define attribute gt
 * (> num1 num2)
 */
VDEFATTR(gt,">",{
    vps_closure_req* jreq;
    vast_obj* obj;
    vast_obj* next;
    vps_inst* inst;
    vcfg_graph* grp;
    int argc = 0;

    jreq = (vps_closure_req*)req;
    grp = jreq->closure->init;
    next = vast_cdr(jreq->ast_obj);
    if (vast_consp(next)) {
      uabort("attr \">\" has no args!");
    }
  label:
    obj = vast_car(next);
    if (!vast_numberp(obj)) {
      vast_number* num = (vast_number*)obj;
      inst = vps_ipushnum(jreq->vps,grp,num->name,num->value);
    } else if (!vast_integerp(obj)) {
      vast_integer* inte = (vast_integer*)obj;
      inst = vps_ipushint(jreq->vps,grp,inte->name,inte->value);      
    } else if (!vast_symbolp(obj)) {
      vast_symbol* sym = (vast_symbol*)obj;
      vps_data* data = vclosure_field_get(jreq->closure,sym->name);
      if (!data) {
	uabort("variable:%s,not define!",sym->name->value);
      }
      if (data->scope == VPS_SCOPE_LOCAL) {
	inst = vps_iloaddt(jreq->vps,sym->name);
      } else if (data->scope == VPS_SCOPE_GLOBAL) {
	inst = vps_ipushdt(jreq->vps,grp,sym->name);
      } else {
	uabort("variable:%s,scope error!",sym->name->value);
      }
    } else {
      uabort("compare args not a number or symbol!");
    }
    vcfg_grp_inst_apd(grp,inst);
    argc++;
    next = vast_cdr(next);
    if (!vast_consp(next)) {
      if (argc == 2) {
	uabort("attr \">\" too many args!");
      } else {
	goto label;
      }
    }
    inst = vps_igt(jreq->vps);
    vcfg_grp_inst_apd(grp,inst);
    
    VATTR_RETURN_VOID;
  })

/*
 * declare attribute
 */
VATTRONLOAD(l5base,{
    VDECLATTR(defun);
    VDECLATTR(if);
    VDECLATTR(add);
    VDECLATTR(gt);
})
