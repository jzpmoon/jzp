/*
 * common function define subr
 */
static vcfg_graph* subr(last_attr_req* subreq,int scope)
{ 
  vps_cntr* vps;
  vps_mod* top;
  last_obj* next;
  last_obj* obj;
  last_symbol* subr_name;
  last_obj* args;
  vcfg_graph* grp;
  last_attr_req req;

  vps = subreq->vps;
  top = subreq->top;
  req.vps = subreq->vps;
  req.top = subreq->top;
  req.reader = subreq->reader;

  next = last_cdr(subreq->ast_obj);
  if(!next || next->t != lastk_cons){
    uabort("subr error!");
  }

  obj = last_car(next);
  if(!obj || obj->t != lastk_symbol){
    uabort("subr name invalid!");
  }
  subr_name = (last_symbol*)obj;

  next = last_cdr(next);
  if(!next || next->t != lastk_cons){
    uabort("subr error!");
  }

  grp = vcfg_graph_new(vps,subr_name->name);
  if(!grp){
    uabort("subr new cfg error!");
  }
  grp->parent = (vps_t*)top;
  grp->scope = scope;

  obj = last_car(next);
  if(obj){
    int arg_idx = 0;
    if(obj->t != lastk_cons){
      uabort("subr args invalid!");
    }
    args = obj;
    /* args procedure */
    while(args != NULL){
      last_obj* arg = last_car(args);
      last_symbol* sym;
      vps_data* data;

      if (arg->t != lastk_symbol) {
	uabort("arg not a symbol!");
      }
      sym = (last_symbol*)arg;
      data = vps_any_new(vps,sym->name);
      if(!data){
	uabort("vps_any_new error!");
      }
      data->idx = arg_idx;
      data->scope = VPS_SCOPE_LOCAL;
      vcfg_grp_params_apd(grp,data);
      args = last_cdr(args);
      arg_idx++;
    }
  }

  req.parent = (vps_cfg*)grp;
  next = last_cdr(next);
  /* instruction sequence */
  while(next){
    last_obj* car;
    last_symbol* inst_name;
    if(next->t != lastk_cons){
      uabort("subr error!");
    }
    obj = last_car(next);
    if(obj->t != lastk_cons){
      uabort("subr error!");
    }
    car = last_car(obj);
    if(!car || car->t != lastk_symbol){
      uabort("subr inst invalid!");
    }
    inst_name = (last_symbol*)car;
    if(inst_name->attr){
      last_attr_res res;
      last_attr* attr;

      req.ast_obj = obj;
      attr = inst_name->attr;
      if (attr == &last_attr_symcall) {
	uabort("not a inst!");
      }
      (attr->action)(&req,&res);
    } else {
      uabort("symbol not define attribute!");
    }
    next = last_cdr(next);
  }

  vcfg_grp_build(vps,grp);
  vcfg_grp_connect(vps,grp);
  
  return grp;
}

/*
 * define attribute subr
 */
LDEFATTR(g_subr,"g-subr",{
    vcfg_graph* grp;

    if (!LATTR_CONTEXT_FILE(req->parent)) {
      uabort("g-subr inst can not use here!");
    }
    grp = subr(req,VPS_SCOPE_GLOBAL);
    vps_mod_code_put(req->top,grp);
    LATTR_RETURN_VOID;
  })
  
/*
 * define attribute subr
 */
LDEFATTR(subr,"subr",{
    vcfg_graph* grp;

    if (!LATTR_CONTEXT_FILE(req->parent)) {
      uabort("subr inst can not use here!");
    }
    grp = subr(req,VPS_SCOPE_LOCAL);
    vps_mod_code_put(req->top,grp);
    LATTR_RETURN_VOID;
  })

/*
 * define attribute g-var
 */
LDEFATTR(g_var,"g-var",{
    last_obj* obj;
    last_obj* next;

    if (!LATTR_CONTEXT_FILE(req->parent)) {
      uabort("g-var inst can not use here!");
    }
    next = last_cdr(req->ast_obj);
    if(!next){
      uabort("g-var inst have no operand!");
    }
    if(next->t != lastk_cons){
      uabort("g-var inst error!");
    }
    obj = last_car(next);
    if (!obj) {
      uabort("g-var has no declare variable name!");
    }
    if(obj->t == lastk_symbol){
      last_symbol* sym = (last_symbol*)obj;
      vps_data* data;
      data = vps_any_new(req->vps,sym->name);
      data->scope = VPS_SCOPE_GLOBAL;
      vps_mod_data_put(req->top,data);
    }else{
      uabort("g-var inst error!");
    }
    ulog0("global var");
    LATTR_RETURN_VOID;
  })

/*
 * define attribute var
 */
LDEFATTR(var,"var",{
    last_obj* ast_obj;
    vps_cntr* vps;
    vps_mod* top;
    vps_cfg* parent;
    last_obj* obj;
    last_obj* next;

    ast_obj = req->ast_obj;
    top = req->top;
    parent = req->parent;
    vps = req->vps;

    if (LATTR_CONTEXT_FILE(parent)) {
      next = last_cdr(ast_obj);
      if (!next) {
	uabort("var inst have no operand!");
      }
      if (next->t != lastk_cons) {
	uabort("var inst error!");
      }
      obj = last_car(next);
      if (!obj) {
	uabort("g-var has no declare variable name!");
      }
      if (obj->t == lastk_symbol) {
	last_symbol* sym = (last_symbol*)obj;
	vps_data* data;
	data = vps_any_new(vps,sym->name);
	data->scope = VPS_SCOPE_LOCAL;
	vps_mod_data_put(top,data);
      } else {
	uabort("var inst error!");
      }
      ulog0("local var");
      LATTR_RETURN_VOID;
    } else {
      uabort("var inst can not use here!");
    }
    LATTR_RETURN_VOID;
  })

/*
 * define attribute local
 */
LDEFATTR(local,"local",{
    last_obj* ast_obj;
    vps_cntr* vps;
    vps_mod* top;
    vps_cfg* parent;
    last_obj* obj;
    last_obj* next;

    ast_obj = req->ast_obj;
    top = req->top;
    parent = req->parent;
    vps = req->vps;
    
    if(LATTR_CONTEXT_SUBR(parent)){
      vcfg_graph* grp;

      grp = (vcfg_graph*)parent;
      if (grp->insts->len > 0) {
	uabort("local only allow use in front of inst!");
      }
      next = last_cdr(ast_obj);
      if(!next){
	uabort("local inst have no operand!");
      }
      if(next->t != lastk_cons){
	uabort("local inst error!");
      }
      obj = last_car(next);
      if (!obj) {
	uabort("local has no declare variable name!");
      }
      if(obj->t == lastk_symbol){
	last_symbol* sym = (last_symbol*)obj;
	vps_data* data;
	if(vcfg_grp_dtget(grp,sym->name)){
	  uabort("local name:%s already exists!",sym->name->value);
	}
	data = vps_any_new(vps,sym->name);
	data->idx = grp->locals->count;
	data->scope = VPS_SCOPE_LOCAL;
	vcfg_grp_locals_apd(grp,data);
      }else{
	uabort("local inst error!");
      }
      ulog0("local");
    } else {
      uabort("local inst can not use here!");
    }
    LATTR_RETURN_VOID;
  })

/*
 * define attribute load
 */
LDEFATTR(load,"load",{
    vps_cntr* vps;
    vps_mod* top;
    vps_cfg* parent;
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;
    vcfg_graph* grp;

    ulog0("load");
    vps = req->vps;
    top = req->top;
    parent = req->parent;
    
    if (!LATTR_CONTEXT_SUBR(parent)) {
      uabort("load inst can not use here!");
    }
    grp = (vcfg_graph*)parent;
    next = last_cdr(req->ast_obj);
    if(!next){
      uabort("load inst have no operand!");
    }
    if(next->t != lastk_cons){
      uabort("load inst error!");
    }
    obj = last_car(next);
    if (!obj) {
      uabort("load has no operand!");
    }
    if(obj->t == lastk_symbol){
      last_symbol* sym = (last_symbol*)obj;
      inst = vps_iloaddt(vps,sym->name);
    }else if(obj->t == lastk_integer){
      last_integer* inte = (last_integer*)obj;
      inst = vps_iloadimm(vps,inte->value);
    }else{
      uabort("load inst error!");
      inst = NULL;
    }
    vcfg_grp_inst_apd(grp,inst);
    LATTR_RETURN_VOID;
  })

/*
 * define attribute store
 */
LDEFATTR(store,"store",{
    vps_cfg* parent;
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;
    vcfg_graph* grp;

    ulog0("store");
    parent = req->parent;
    
    if(!LATTR_CONTEXT_SUBR(parent)){
      uabort("store inst can not use here!");
    }
    grp = (vcfg_graph*)parent;
    next = last_cdr(req->ast_obj);
    if(!next){
      uabort("store inst have no operand!");
    }
    if(next->t != lastk_cons){
      uabort("store inst error!");
    }
    obj = last_car(next);
    if (!obj) {
      uabort("store has no operand!");
    }
    if(obj->t == lastk_symbol){
      last_symbol* sym = (last_symbol*)obj;
      inst = vps_istoredt(req->vps,sym->name);
    }else if(obj->t == lastk_integer){
      last_integer* inte = (last_integer*)obj;
      inst = vps_istoreimm(req->vps,inte->value);
    }else{
      uabort("store inst error!");      
      inst = NULL;
    }
    vcfg_grp_inst_apd(grp,inst);
    LATTR_RETURN_VOID;
  })

/*
 * define attribute push
 */
LDEFATTR(push,"push",{
    vps_cfg* parent;
    vcfg_graph* grp;
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;
    
    ulog0("push");
    parent = req->parent;
    
    if(!LATTR_CONTEXT_SUBR(parent)){
      uabort("push inst can not use here!");
    }
    grp = (vcfg_graph*)parent;
    next = last_cdr(req->ast_obj);
    if(!next){
      uabort("push inst have no operand!");
    }
    if(next->t != lastk_cons){
      uabort("push inst error!");
    }
    obj = last_car(next);
    if (!obj) {
      uabort("push has no operand!");
    }
    if(obj->t == lastk_symbol){
      last_symbol* sym = (last_symbol*)obj;
      inst = vps_ipushdt(req->vps,grp,sym->name);
    }else if(obj->t == lastk_integer){
      last_integer* inte = (last_integer*)obj;
      inst = vps_ipushint(req->vps,grp,inte->name,inte->value);
    }else if(obj->t == lastk_number){
      last_number* num = (last_number*)obj;
      inst = vps_ipushnum(req->vps,grp,num->name,num->value);
    }else if(obj->t == lastk_string){
      last_string* str = (last_string*)obj;
      inst = vps_ipushstr(req->vps,grp,str->value);
    }else if(obj->t == lastk_character){
      last_character* chara = (last_character*)obj;
      inst = vps_ipushchar(req->vps,grp,chara->value);
    }else if(obj->t == lastk_nil){
      inst = vps_ipushnil(req->vps,grp);
    } else if (obj->t == lastk_cons) {
      last_attr_req new_req;
      last_obj* next;
      last_symbol* sym;
      last_attr* attr;
      vps_type* type;

      next = obj;
      obj = last_car(next);
      if (!obj || obj->t != lastk_symbol) {
	uabort("push arg error!");
      }
      new_req = *req;
      sym = (last_symbol*)obj;
      attr = sym->attr;
      new_req.ast_obj = next;
      attr->action(&new_req,res);
      if (res->res_type != lar_vps_apd) {
	uabort("push arg error!");
      }
      if (!res->res_vps || res->res_vps->t != vpsk_type) {
	uabort("push arg not a sizeof");
      }
      type = (vps_type*)res->res_vps;

      inst = vps_ipushint(req->vps,grp,NULL,type->type_size);
    }else{
      uabort("push inst error!");
      inst = NULL;
    }
    vcfg_grp_inst_apd(grp,inst);
    LATTR_RETURN_VOID;
  })
/*
 * define attribute top
 */
LDEFATTR(top,"top",{
    vps_cfg* parent;
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;
    vcfg_graph* grp;
    
    ulog0("top");
    parent = req->parent;
    
    if(!LATTR_CONTEXT_SUBR(parent)){
      uabort("top inst can not use here!");
    }
    grp = (vcfg_graph*)parent;
    next = last_cdr(req->ast_obj);
    if(!next){
      uabort("top inst have no operand!");
    }
    if(next->t != lastk_cons){
      uabort("top inst error!");
    }
    obj = last_car(next);
    if (!obj) {
      uabort("top has no operand!");
    }
    if(obj->t == lastk_integer){
      last_integer* inte = (last_integer*)obj;
      inst = vps_itop(req->vps,inte->value);
    }else{
      uabort("top inst error!");
      inst = NULL;
    }
    vcfg_grp_inst_apd(grp,inst);
    LATTR_RETURN_VOID;
  })

/*
 * define attribute pop
 */
LDEFATTR(pop,"pop",{
    vps_cfg* parent;
    vcfg_graph* grp;
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;

    ulog0("pop");
    parent = req->parent;
    
    if(!LATTR_CONTEXT_SUBR(parent)){
      uabort("pop inst can not use here!");
    }
    grp = (vcfg_graph*)parent;
    next = last_cdr(req->ast_obj);
    if (next) {
      if (next->t != lastk_cons) {
	uabort("top inst error!");
      }
      obj = last_car(next);
      if (!obj) {
	uabort("top has no operand!");
      }
      if (obj->t == lastk_symbol) {
	last_symbol* sym = (last_symbol*)obj;
	inst = vps_ipopdt(req->vps,grp,sym->name);
      } else {
	uabort("pop inst error!");
	inst = NULL;
      }
    } else {
      inst = vps_ipopv(req->vps);
    }
    vcfg_grp_inst_apd(grp,inst);
    LATTR_RETURN_VOID;
  })

/*
 * define attribute add
 */
LDEFATTR(add,"add",{
    vps_cfg* parent;
    vps_inst* inst;
    vcfg_graph* grp;
    
    ulog0("add");
    parent = req->parent;
    
    if(!LATTR_CONTEXT_SUBR(parent)){
      uabort("add inst can not use here!");
    }
    grp = (vcfg_graph*)parent;
    inst = vps_iadd(req->vps);
    vcfg_grp_inst_apd(grp,inst);
    LATTR_RETURN_VOID;
  })

/*
 * define attribute sub
 */
LDEFATTR(sub,"sub",{
    vps_cfg* parent;
    vps_inst* inst;
    vcfg_graph* grp;
    
    ulog0("sub");    
    parent = req->parent;
    
    if(!LATTR_CONTEXT_SUBR(parent)){
      uabort("sub inst can not use here!");
    }
    grp = (vcfg_graph*)parent;
    inst = vps_isub(req->vps);
    vcfg_grp_inst_apd(grp,inst);
    LATTR_RETURN_VOID;
  })

/*
 * define attribute mul
 */
LDEFATTR(mul,"mul",{
    vps_cfg* parent;
    vps_inst* inst;
    vcfg_graph* grp;
    
    ulog0("mul");
    parent = req->parent;

    if(!LATTR_CONTEXT_SUBR(parent)){
      uabort("mul inst can not use here!");
    }
    grp = (vcfg_graph*)parent;
    inst = vps_imul(req->vps);
    vcfg_grp_inst_apd(grp,inst);
    LATTR_RETURN_VOID;
  })

/*
 * define attribute div
 */
LDEFATTR(div,"div",{
    vps_cfg* parent;
    vps_inst* inst;
    vcfg_graph* grp;
    
    ulog0("div");
    parent = req->parent;
    
    if(!LATTR_CONTEXT_SUBR(parent)){
      uabort("div inst can not use here!");
    }
    grp = (vcfg_graph*)parent;
    inst = vps_idiv(req->vps);
    vcfg_grp_inst_apd(grp,inst);
    LATTR_RETURN_VOID;
  })

/*
 * define attribute jmpi
 */
LDEFATTR(jmpi,"jmpi",{
    vps_cfg* parent;
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;
    vcfg_graph* grp;

    ulog0("jmpi");
    parent = req->parent;
    
    if(!LATTR_CONTEXT_SUBR(parent)){
      uabort("jmpi inst can not use here!");
    }
    grp = (vcfg_graph*)parent;
    next = last_cdr(req->ast_obj);
    if(!next){
      uabort("jmpi inst have no operand!");
    }
    if(next->t != lastk_cons){
      uabort("jmpi inst error!");
    }
    obj = last_car(next);
    if (!obj) {
      uabort("jmpi has no operand!");
    }
    if(obj->t == lastk_symbol){
      last_symbol* symbol = (last_symbol*)obj;
      inst = vps_ijmpilb(req->vps,symbol->name);
    }else if(obj->t == lastk_integer){
      last_integer* inte = (last_integer*)obj;
      inst = vps_ijmpiimm(req->vps,inte->value);
    }else{
      uabort("jmpi inst error!");
      inst = NULL;
    }
    vcfg_grp_inst_apd(grp,inst);
    LATTR_RETURN_VOID;
  })

/*
 * define attribute jmp
 */
LDEFATTR(jmp,"jmp",{
    vps_cfg* parent;
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;
    vcfg_graph* grp;

    ulog0("jmp");
    parent = req->parent;
    
    if(!LATTR_CONTEXT_SUBR(parent)){
      uabort("jmp inst can not use here!");
    }
    grp = (vcfg_graph*)parent;
    next = last_cdr(req->ast_obj);
    if(!next){
      uabort("jmp inst have no operand!");
    }
    if(next->t != lastk_cons){
      uabort("jmp inst error!");
    }
    obj = last_car(next);
    if (!obj) {
      uabort("jmp has no operand!");
    }
    if(obj->t == lastk_symbol){
      last_symbol* symbol = (last_symbol*)obj;
      inst = vps_ijmplb(req->vps,symbol->name);
    }else if(obj->t == lastk_integer){
      last_integer* inte = (last_integer*)obj;
      inst = vps_ijmpimm(req->vps,inte->value);
    }else{
      uabort("jmp inst error!");
      inst = NULL;
    }
    vcfg_grp_inst_apd(grp,inst);
    LATTR_RETURN_VOID;
  })

/*
 * define attribute eq
 */
LDEFATTR(eq,"eq",{
    vps_cfg* parent;
    vps_inst* inst;
    vcfg_graph* grp;

    ulog0("eq");
    parent = req->parent;
    
    if(!LATTR_CONTEXT_SUBR(parent)){
      uabort("eq inst can not use here!");
    }
    grp = (vcfg_graph*)parent;
    inst = vps_ieq(req->vps);
    vcfg_grp_inst_apd(grp,inst);
    LATTR_RETURN_VOID;
  })

/*
 * define attribute gt
 */
LDEFATTR(gt,"gt",{
    vps_cfg* parent;
    vps_inst* inst;
    vcfg_graph* grp;

    ulog0("gt");
    parent = req->parent;
    
    if(!LATTR_CONTEXT_SUBR(parent)){
      uabort("gt inst can not use here!");
    }
    grp = (vcfg_graph*)parent;
    inst = vps_igt(req->vps);
    vcfg_grp_inst_apd(grp,inst);
    LATTR_RETURN_VOID;
  })

/*
 * define attribute lt
 */
LDEFATTR(lt,"lt",{
    vps_cfg* parent;
    vps_inst* inst;
    vcfg_graph* grp;

    ulog0("lt");
    parent = req->parent;
	
    if(!LATTR_CONTEXT_SUBR(parent)){
      uabort("lt inst can not use here!");
    }
    grp = (vcfg_graph*)parent;
    inst = vps_ilt(req->vps);
    vcfg_grp_inst_apd(grp,inst);
    LATTR_RETURN_VOID;
  })

/*
 * define attribute and
 */
LDEFATTR(and,"and",{
    vps_cfg* parent;
    vps_inst* inst;
    vcfg_graph* grp;

    ulog0("and");
    parent = req->parent;
    
    if(!LATTR_CONTEXT_SUBR(parent)){
      uabort("and inst can not use here!");
    }
    grp = (vcfg_graph*)parent;
    inst = vps_iand(req->vps);
    vcfg_grp_inst_apd(grp,inst);
    LATTR_RETURN_VOID;
  })

/*
 * define attribute or
 */
LDEFATTR(or,"or",{
    vps_cfg* parent;
    vps_inst* inst;
    vcfg_graph* grp;

    ulog0("or");
    parent = req->parent;
    
    if(!LATTR_CONTEXT_SUBR(parent)){
      uabort("or inst can not use here!");
    }
    grp = (vcfg_graph*)parent;
    inst = vps_ior(req->vps);
    vcfg_grp_inst_apd(grp,inst);
    LATTR_RETURN_VOID;
  })

/*
 * define attribute not
 */
LDEFATTR(not,"not",{
    vps_cfg* parent;
    vps_inst* inst;
    vcfg_graph* grp;

    ulog0("not");
    parent = req->parent;
    
    if(!LATTR_CONTEXT_SUBR(parent)){
      uabort("not inst can not use here!");
    }
    grp = (vcfg_graph*)parent;
    inst = vps_inot(req->vps);
    vcfg_grp_inst_apd(grp,inst);
    LATTR_RETURN_VOID;
  })

/*
 * define attribute call
 */
LDEFATTR(call,"call",{
    vps_cfg* parent;
    vps_inst* inst;
    vcfg_graph* grp;

    ulog0("call");
    parent = req->parent;
    
    if(!LATTR_CONTEXT_SUBR(parent)){
      uabort("call inst can not use here!");
    }
    grp = (vcfg_graph*)parent;
    inst = vps_icall(req->vps);
    vcfg_grp_inst_apd(grp,inst);
    LATTR_RETURN_VOID;
  })

/*
 * define attribute return
 */
LDEFATTR(return,"return",{
    vps_cfg* parent;
    vps_inst* inst;
    vcfg_graph* grp;
    
    ulog0("return");
    parent = req->parent;
    
    if(!LATTR_CONTEXT_SUBR(parent)){
      uabort("return inst can not use here!");
    }
    grp = (vcfg_graph*)parent;
    inst = vps_ireturn(req->vps);
    vcfg_grp_inst_apd(grp,inst);
    LATTR_RETURN_VOID;
  })

/*
 * define attribute retvoid
 */
LDEFATTR(retvoid,"retvoid",{
    vps_cfg* parent;
    vps_inst* inst;
    vcfg_graph* grp;
    
    ulog0("retvoid");
    parent = req->parent;
    
    if(!LATTR_CONTEXT_SUBR(parent)){
      uabort("retvoid inst can not use here!");
    }
    grp = (vcfg_graph*)parent;
    inst = vps_iretvoid(req->vps);
    vcfg_grp_inst_apd(grp,inst);
    LATTR_RETURN_VOID;
  })

/*
 * define attribute ref
 */
LDEFATTR(ref,"ref",{
    vps_cfg* parent;
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;
    vcfg_graph* grp;

    ulog0("ref");
    parent = req->parent;
    
    if(!LATTR_CONTEXT_SUBR(parent)){
      uabort("ref inst can not use here!");
    }
    grp = (vcfg_graph*)parent;
    next = last_cdr(req->ast_obj);
    if(!next){
      uabort("ref inst have no operand!");
    }
    if(next->t != lastk_cons){
      uabort("ref inst error!");
    }
    obj = last_car(next);
    if (!obj) {
      uabort("ref has no operand!");
    }
    if(obj->t == lastk_symbol){
      last_symbol* sym = (last_symbol*)obj;
      inst = vps_irefdt(req->vps,sym->name);
    }else if(obj->t == lastk_integer){
      last_integer* inte = (last_integer*)obj;
      inst = vps_irefimm(req->vps,inte->value);
    } else if (obj->t == lastk_cons) {
      last_attr_req new_req;
      last_obj* next;
      last_symbol* sym;
      last_attr* attr;
      vps_type* type;

      next = obj;
      obj = last_car(next);
      if (!obj || obj->t != lastk_symbol) {
	uabort("ref arg error!");
      }
      new_req = *req;
      sym = (last_symbol*)obj;
      attr = sym->attr;
      new_req.ast_obj = next;
      attr->action(&new_req,res);
      if (res->res_type != lar_vps_apd) {
	uabort("ref arg error!");
      }
      if (!res->res_vps || res->res_vps->t != vpsk_type) {
	uabort("ref arg not a indexof");
      }
      type = (vps_type*)res->res_vps;

      inst = vps_irefimm(req->vps,type->type_index);
    }else{
      uabort("ref inst error!");
      inst = NULL;
    }
    vcfg_grp_inst_apd(grp,inst);
    LATTR_RETURN_VOID;
  })

/*
 * define attribute set
 */
LDEFATTR(set,"set",{
    vps_cfg* parent;
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;
    vcfg_graph* grp;

    ulog0("set");
    parent = req->parent;
    
    if(!LATTR_CONTEXT_SUBR(parent)){
      uabort("set inst can not use here!");
    }
    grp = (vcfg_graph*)parent;
    next = last_cdr(req->ast_obj);
    if(!next){
      uabort("set inst have no operand!");
    }
    if(next->t != lastk_cons){
      uabort("set inst error!");
    }
    obj = last_car(next);
    if (!obj) {
      uabort("set has no operand!");
    }
    if(obj->t == lastk_symbol){
      last_symbol* sym = (last_symbol*)obj;
      inst = vps_isetdt(req->vps,sym->name);
    }else if(obj->t == lastk_integer){
      last_integer* inte = (last_integer*)obj;
      inst = vps_isetimm(req->vps,inte->value);
    } else if (obj->t == lastk_cons) {
      last_attr_req new_req;
      last_obj* next;
      last_symbol* sym;
      last_attr* attr;
      vps_type* type;

      next = obj;
      obj = last_car(next);
      if (!obj || obj->t != lastk_symbol) {
	uabort("set arg error!");
      }
      new_req = *req;
      sym = (last_symbol*)obj;
      attr = sym->attr;
      new_req.ast_obj = next;
      attr->action(&new_req,res);
      if (res->res_type != lar_vps_apd) {
	uabort("set arg error!");
      }
      if (!res->res_vps || res->res_vps->t != vpsk_type) {
	uabort("set arg not a indexof");
      }
      type = (vps_type*)res->res_vps;

      inst = vps_isetimm(req->vps,type->type_index);
    }else{
      uabort("set inst error!");
      inst = NULL;
    }
    vcfg_grp_inst_apd(grp,inst);
    LATTR_RETURN_VOID;
  })

/*
 * define attribute label
 */
LDEFATTR(label,"label",{
    vps_cfg* parent;
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;
    vcfg_graph* grp;

    ulog0("label");
    parent = req->parent;
    
    if(!LATTR_CONTEXT_SUBR(parent)){
      uabort("label inst can not use here!");
    }
    grp = (vcfg_graph*)parent;
    next = last_cdr(req->ast_obj);
    if(!next){
      uabort("label inst have no operand!");
    }
    if(next->t != lastk_cons){
      uabort("label inst error!");
    }
    obj = last_car(next);
    if (!obj) {
      uabort("label has no operand!");
    }
    if (obj->t == lastk_symbol) {
      last_symbol* symbol = (last_symbol*)obj;
      inst = vps_ilabel(req->vps,symbol->name);
    } else {
      uabort("label inst error!");
      inst = NULL;
    }
    vcfg_grp_inst_apd(grp,inst);
    LATTR_RETURN_VOID;
  })

/*
 * define attribute nop
 */
LDEFATTR(nop,"nop",{
    vps_cfg* parent;
    vps_inst* inst;
    vcfg_graph* grp;

    ulog0("nop");
    parent = req->parent;
    
    if (!LATTR_CONTEXT_SUBR(parent)) {
      uabort("nop inst can not use here!");
    }
    grp = (vcfg_graph*)parent;
    inst = vps_inop(req->vps);
    vcfg_grp_inst_apd(grp,inst);
    LATTR_RETURN_VOID;
  })

/*
 * declare attribute
 */
LATTRONLOAD(base,{
    LDECLATTR(g_subr);
    LDECLATTR(subr);
    LDECLATTR(g_var);
    LDECLATTR(var);
    LDECLATTR(local);
    LDECLATTR(nop);
    LDECLATTR(load);
    LDECLATTR(store);
    LDECLATTR(push);
    LDECLATTR(top);
    LDECLATTR(pop);
    LDECLATTR(jmp);
    LDECLATTR(jmpi);
    LDECLATTR(eq);
    LDECLATTR(gt);
    LDECLATTR(lt);
    LDECLATTR(and);
    LDECLATTR(or);
    LDECLATTR(not);
    LDECLATTR(add);
    LDECLATTR(sub);
    LDECLATTR(mul);
    LDECLATTR(div);
    LDECLATTR(call);
    LDECLATTR(return);
    LDECLATTR(retvoid);
    LDECLATTR(ref);
    LDECLATTR(set);
    LDECLATTR(label);
  })
