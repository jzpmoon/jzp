/*
 * common function define subr
 */
static vdfg_graph* subr(vps_mod* top,vps_dfg* parent,last_obj* ast_obj){ 
  vps_cntr* vps;
  last_obj* next;
  last_obj* obj;
  last_symbol* subr_name;
  last_obj* args;
  vdfg_graph* grp;
  vdfg_block* blk;

  vps = top->vps;

  next = last_cdr(ast_obj);
  if(next->t != lastk_cons){
    uabort("subr error!");
  }

  obj = last_car(next);
  if(obj->t != lastk_symbol){
    uabort("subr name invalid!");
  }
  subr_name = (last_symbol*)obj;

  next = last_cdr(next);
  if(next->t != lastk_cons){
    uabort("subr error!");
  }

  grp = vdfg_graph_new(vps);
  if(!grp){
    uabort("subr new dfg error!");
  }
  grp->parent = (vps_t*)top;

  obj = last_car(next);
  if(obj){
    int arg_idx = 0;
    if(obj->t != lastk_cons){
      uabort("subr args invalid!");
    }
    args = obj;
    /* args procedure */
    while(args != NULL){
      last_obj* arg = last_car(args);
      last_symbol* sym;
      vps_data* data;

      if (arg->t != lastk_symbol) {
	uabort("arg not a symbol!");
      }
      sym = (last_symbol*)arg;
      data = vps_any_new(vps,sym->name,vstk_stack);
      if(!data){
	uabort("vps_any_new error!");
      }
      data->idx = arg_idx;
      data->scope = VPS_SCOPE_LOCAL;
      vdfg_grp_params_apd(grp,data);
      args = last_cdr(args);
      arg_idx++;
    }
  }

  grp->name = subr_name->name;
  blk = vdfg_block_new(vps);
  if(!blk){
    uabort("subr new blk error!");
  }
  blk->parent = (vps_t*)grp;
  vdfg_grp_cdapd(vps,grp,(vps_dfg*)blk);

  next = last_cdr(next);
  while(next){
    last_obj* car;
    last_symbol* inst_name;
    if(next->t != lastk_cons){
      uabort("subr error!");
    }
    obj = last_car(next);
    if(obj->t != lastk_cons){
      uabort("subr error!");
    }
    car = last_car(obj);
    if(car->t != lastk_symbol){
      uabort("subr inst invalid!");
    }
    inst_name = (last_symbol*)car;
    if(inst_name->attr){
      last_attr* attr;
      last_attr_res res;
      int retval;

      attr = inst_name->attr;
      retval = (attr->action)(top,(vps_dfg*)blk,obj,&res);
      if (retval != 0) {
	if (res.res_type == lar_vps_apd) {
	  /* append instruction */
	  vps_t* res_vps = res.res_vps;
	  if (!res_vps) {
	    uabort("res_vps can not be null!");
	  }
	  if(res_vps->t != vpsk_inst){
	    uabort("not a inst!");
	  }
	  vdfg_blk_apd(blk,(vps_inst*)res_vps);
	} else if (res.res_type == lar_blk_new) {
	  /* append a new block */
	  vps_t* res_vps = res.res_vps;
	  if (!res_vps) {
	    uabort("res_vps can not be null!");
	  }
	  if (res_vps->t != vdfgk_blk) {
	    uabort("not a block");
	  }
	  blk = (vdfg_block*)res_vps;
	  blk->parent = (vps_t*)grp;
	  vdfg_grp_cdapd(vps,grp,(vps_dfg*)blk);
	} else {
	  /* others */
	  uabort("unknow res_type!");
	}
      }
    }
    next = last_cdr(next);
  }
    
  return grp;
}

/*
 * define attribute entry
 */
LDEFATTR(entry,"entry",{
    vdfg_graph* grp;

    if (parent) {
      uabort("subr inst can not use here!");
    }
    if (top->entry) {
      uabort("mod entry already exists!");
    }
    grp = subr(top,parent,ast_obj);
    grp->scope = VPS_SCOPE_LOCAL;
    top->entry = grp;
    LATTR_RETURN_VOID;
  })

/*
 * define attribute subr
 */
LDEFATTR(g_subr,"g-subr",{
    vdfg_graph* grp;

    if (parent) {
      uabort("subr inst can not use here!");
    }
    grp = subr(top,parent,ast_obj);
    grp->scope = VPS_SCOPE_GLOBAL;
    vps_mod_code_put(top,grp);
    LATTR_RETURN_VOID;
  })
  
/*
 * define attribute subr
 */
LDEFATTR(subr,"subr",{
    vdfg_graph* grp;

    if (parent) {
      uabort("subr inst can not use here!");
    }
    grp = subr(top,parent,ast_obj);
    grp->scope = VPS_SCOPE_LOCAL;
    vps_mod_code_put(top,grp);
    LATTR_RETURN_VOID;
  })

/*
 * define attribute g-var
 */
LDEFATTR(g_var,"g-var",{
    vps_cntr* vps;
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;

    inst = NULL;
    vps = top->vps;
    if(parent){
      uabort("g-var inst can not use here!");
    }
    next = last_cdr(ast_obj);
    if(!next){
      uabort("g-var inst have no operand!");
    }
    if(next->t != lastk_cons){
      uabort("g-var inst error!");
    }
    obj = last_car(next);
    if(obj->t == lastk_symbol){
      last_symbol* sym = (last_symbol*)obj;
      vps_data* data;
      data = vps_any_new(vps,sym->name,vstk_heap);
      data->scope = VPS_SCOPE_GLOBAL;
      vps_mod_data_put(top,data);
    }else{
      uabort("g-var inst error!");
    }
    ulog("global var");
    LATTR_RETURN_VOID;
  })

/*
 * define attribute var
 */
LDEFATTR(var,"var",{
    vps_cntr* vps;
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;

    inst = NULL;
    vps = top->vps;
    if(parent){
      vdfg_graph* grp;
      vdfg_block* blk;
      if(parent->t != vdfgk_blk){
	uabort("var inst can not use here!");
      }
      blk = (vdfg_block*)parent;
      if(!blk->parent){
	uabort("var inst can not use here!");
      }
      if(blk->parent->t != vdfgk_grp){
	uabort("var inst can not use here!");
      }
      grp = (vdfg_graph*)blk->parent;
      
      next = last_cdr(ast_obj);
      if(!next){
	uabort("var inst have no operand!");
      }
      if(next->t != lastk_cons){
	uabort("var inst error!");
      }
      obj = last_car(next);
      if(obj->t == lastk_symbol){
	last_symbol* sym = (last_symbol*)obj;
	vps_data* data;
	if(vdfg_grp_dtget(grp,sym->name)){
	  uabort("var name:%s already exists!",sym->name->value);
	}
	data = vps_any_new(vps,sym->name,vstk_stack);
	data->idx = grp->locals->count;
	data->scope = VPS_SCOPE_LOCAL;
	vdfg_grp_locals_apd(grp,data);
	inst = vps_inop(vps);
      }else{
	uabort("var inst error!");
      }
      ulog("subr var");
      LATTR_RETURN(lar_vps_apd,inst);
    }else if(!parent){
      next = last_cdr(ast_obj);
      if(!next){
	uabort("var inst have no operand!");
      }
      if(next->t != lastk_cons){
	uabort("var inst error!");
      }
      obj = last_car(next);
      if(obj->t == lastk_symbol){
	last_symbol* sym = (last_symbol*)obj;
	vps_data* data;
	data = vps_any_new(vps,sym->name,vstk_heap);
	data->scope = VPS_SCOPE_LOCAL;
	vps_mod_data_put(top,data);
      }else{
	uabort("var inst error!");
      }
      ulog("local var");
      LATTR_RETURN_VOID;
    }else{
      uabort("var inst can not use here!");
    }
    LATTR_RETURN_VOID;
  })

/*
 * define attribute load
 */
LDEFATTR(load,"load",{
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;

    inst = NULL;
    if(!parent || parent->t != vdfgk_blk){
      uabort("load inst can not use here!");
    }
    next = last_cdr(ast_obj);
    if(!next){
      uabort("load inst have no operand!");
    }
    if(next->t != lastk_cons){
      uabort("load inst error!");
    }
    obj = last_car(next);
    if(obj->t == lastk_symbol){
      last_symbol* sym = (last_symbol*)obj;
      inst = vps_iloaddt(top->vps,sym->name);
    }else if(obj->t == lastk_number){
      last_number* num = (last_number*)obj;
      inst = vps_iloadimm(top->vps,(usize_t)num->dnum);
    }else{
      uabort("load inst error!");      
    }
    ulog("load");
    LATTR_RETURN(lar_vps_apd,inst);
  })

/*
 * define attribute store
 */
LDEFATTR(store,"store",{
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;

    inst = NULL;
    if(!parent || parent->t != vdfgk_blk){
      uabort("store inst can not use here!");
    }
    next = last_cdr(ast_obj);
    if(!next){
      uabort("store inst have no operand!");
    }
    if(next->t != lastk_cons){
      uabort("store inst error!");
    }
    obj = last_car(next);
    if(obj->t == lastk_symbol){
      last_symbol* sym = (last_symbol*)obj;
      inst = vps_istoredt(top->vps,sym->name);
    }else if(obj->t == lastk_number){
      last_number* num = (last_number*)obj;
      inst = vps_istoreimm(top->vps,(usize_t)num->dnum);
    }else{
      uabort("store inst error!");      
    }
    ulog("store");
    LATTR_RETURN(lar_vps_apd,inst);
  })

/*
 * define attribute push
 */
LDEFATTR(push,"push",{
    vps_dfg* dfg;
    vdfg_graph* grp;
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;

    inst = NULL;
    if(!parent || parent->t != vdfgk_blk){
      uabort("push inst can not use here!");
    }
    dfg = (vps_dfg*)parent;
    if (dfg->parent->t != vdfgk_grp) {
      uabort("push inst must be use at subr!");
    }
    grp = (vdfg_graph*)dfg->parent;
    next = last_cdr(ast_obj);
    if(!next){
      uabort("push inst have no operand!");
    }
    if(next->t != lastk_cons){
      uabort("push inst error!");
    }
    obj = last_car(next);
    if(obj->t == lastk_symbol){
      last_symbol* sym = (last_symbol*)obj;
      inst = vps_ipushdt(top->vps,grp,sym->name);
    }else if(obj->t == lastk_number){
      last_number* num = (last_number*)obj;
      inst = vps_ipushimm(top->vps,grp,num->name,num->dnum);
    }else if(obj->t == lastk_string){
      last_string* str = (last_string*)obj;
      inst = vps_ipushstr(top->vps,grp,str->string);
    }else{
      uabort("push inst error!");
    }
    ulog("push");
    LATTR_RETURN(lar_vps_apd,inst);
  })
/*
 * define attribute top
 */
LDEFATTR(top,"top",{
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;

    inst = NULL;
    if(!parent || parent->t != vdfgk_blk){
      uabort("top inst can not use here!");
    }
    next = last_cdr(ast_obj);
    if(!next){
      uabort("top inst have no operand!");
    }
    if(next->t != lastk_cons){
      uabort("top inst error!");
    }
    obj = last_car(next);
    if(obj->t == lastk_number){
      last_number* num = (last_number*)obj;
      inst = vps_itop(top->vps,num->dnum);
    }else{
      uabort("top inst error!");
    }
    ulog("top");
    LATTR_RETURN(lar_vps_apd,inst);
  })

/*
 * define attribute pop
 */
LDEFATTR(pop,"pop",{
    vps_dfg* dfg;
    vdfg_graph* grp;
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;

    if(!parent || parent->t != vdfgk_blk){
      uabort("pop inst can not use here!");
    }
    dfg = (vps_dfg*)parent;
    if (dfg->parent->t != vdfgk_grp) {
      uabort("push inst must be use at subr!");
    }
    grp = (vdfg_graph*)dfg->parent;
    next = last_cdr(ast_obj);
    if (next) {
      if (next->t != lastk_cons) {
	uabort("top inst error!");
      }
      obj = last_car(next);
      if (obj->t == lastk_symbol) {
	last_symbol* sym = (last_symbol*)obj;
	inst = vps_ipopdt(top->vps,grp,sym->name);
      } else {
	uabort("pop inst error!");
	inst = NULL;
      }
    } else {
      inst = vps_ipopv(top->vps);
    }
    
    ulog("pop");
    LATTR_RETURN(lar_vps_apd,inst);
  })

/*
 * define attribute add
 */
LDEFATTR(add,"add",{
    vps_inst* inst;

    if(!parent || parent->t != vdfgk_blk){
      uabort("add inst can not use here!");
    }
    inst = vps_iadd(top->vps);
    ulog("add");
    LATTR_RETURN(lar_vps_apd,inst);
  })

/*
 * define attribute sub
 */
LDEFATTR(sub,"sub",{
    vps_inst* inst;

    if(!parent || parent->t != vdfgk_blk){
      uabort("sub inst can not use here!");
    }
    inst = vps_isub(top->vps);
    ulog("sub");
    LATTR_RETURN(lar_vps_apd,inst);
  })

/*
 * define attribute mul
 */
LDEFATTR(mul,"mul",{
    vps_inst* inst;

    if(!parent || parent->t != vdfgk_blk){
      uabort("mul inst can not use here!");
    }
    inst = vps_imul(top->vps);
    ulog("mul");
    LATTR_RETURN(lar_vps_apd,inst);
  })

/*
 * define attribute div
 */
LDEFATTR(div,"div",{
    vps_inst* inst;

    if(!parent || parent->t != vdfgk_blk){
      uabort("div inst can not use here!");
    }
    inst = vps_idiv(top->vps);
    ulog("div");
    LATTR_RETURN(lar_vps_apd,inst);
  })

/*
 * define attribute jmpi
 */
LDEFATTR(jmpi,"jmpi",{
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;

    inst = NULL;
    if(!parent || parent->t != vdfgk_blk){
      uabort("jmpi inst can not use here!");
    }
    next = last_cdr(ast_obj);
    if(!next){
      uabort("jmpi inst have no operand!");
    }
    if(next->t != lastk_cons){
      uabort("jmpi inst error!");
    }
    obj = last_car(next);
    if(obj->t == lastk_symbol){
      last_symbol* symbol = (last_symbol*)obj;
      inst = vps_ijmpilb(top->vps,symbol->name);
    }else if(obj->t == lastk_number){
      last_number* num = (last_number*)obj;
      inst = vps_ijmpiimm(top->vps,(usize_t)num->dnum);
    }else{
      uabort("jmpi inst error!");
    }
    ulog("jmpi");
    LATTR_RETURN(lar_vps_apd,inst);
  })

/*
 * define attribute jmp
 */
LDEFATTR(jmp,"jmp",{
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;

    inst = NULL;
    if(!parent || parent->t != vdfgk_blk){
      uabort("jmp inst can not use here!");
    }
    next = last_cdr(ast_obj);
    if(!next){
      uabort("jmp inst have no operand!");
    }
    if(next->t != lastk_cons){
      uabort("jmp inst error!");
    }
    obj = last_car(next);
    if(obj->t == lastk_symbol){
      last_symbol* symbol = (last_symbol*)obj;
      inst = vps_ijmplb(top->vps,symbol->name);
    }else if(obj->t == lastk_number){
      last_number* num = (last_number*)obj;
      inst = vps_ijmpimm(top->vps,(usize_t)num->dnum);
    }else{
      uabort("jmp inst error!");
    }
    ulog("jmp");
    LATTR_RETURN(lar_vps_apd,inst);
  })

/*
 * define attribute eq
 */
LDEFATTR(eq,"eq",{
    vps_inst* inst;

    if(!parent || parent->t != vdfgk_blk){
      uabort("eq inst can not use here!");
    }
    inst = vps_ieq(top->vps);
    ulog("eq");
    LATTR_RETURN(lar_vps_apd,inst);
  })

/*
 * define attribute gt
 */
LDEFATTR(gt,"gt",{
    vps_inst* inst;

    if(!parent || parent->t != vdfgk_blk){
      uabort("gt inst can not use here!");
    }
    inst = vps_igt(top->vps);
    ulog("gt");
    LATTR_RETURN(lar_vps_apd,inst);
  })

/*
 * define attribute lt
 */
LDEFATTR(lt,"lt",{
    vps_inst* inst;

    if(!parent || parent->t != vdfgk_blk){
      uabort("lt inst can not use here!");
    }
    inst = vps_ilt(top->vps);
    ulog("lt");
    LATTR_RETURN(lar_vps_apd,inst);
  })

/*
 * define attribute and
 */
LDEFATTR(and,"and",{
    vps_inst* inst;

    if(!parent || parent->t != vdfgk_blk){
      uabort("and inst can not use here!");
    }
    inst = vps_iand(top->vps);
    ulog("and");
    LATTR_RETURN(lar_vps_apd,inst);
  })

/*
 * define attribute or
 */
LDEFATTR(or,"or",{
    vps_inst* inst;

    if(!parent || parent->t != vdfgk_blk){
      uabort("or inst can not use here!");
    }
    inst = vps_ior(top->vps);
    ulog("or");
    LATTR_RETURN(lar_vps_apd,inst);
  })

/*
 * define attribute not
 */
LDEFATTR(not,"not",{
    vps_inst* inst;

    if(!parent || parent->t != vdfgk_blk){
      uabort("not inst can not use here!");
    }
    inst = vps_inot(top->vps);
    ulog("not");
    LATTR_RETURN(lar_vps_apd,inst);
  })

/*
 * define attribute call
 */
LDEFATTR(call,"call",{
    vps_inst* inst;

    if(!parent || parent->t != vdfgk_blk){
      uabort("call inst can not use here!");
    }
    inst = vps_icall(top->vps);
    ulog("call");
    LATTR_RETURN(lar_vps_apd,inst);
  })

/*
 * define attribute return
 */
LDEFATTR(return,"return",{
    vps_inst* inst;

    if(!parent || parent->t != vdfgk_blk){
      uabort("return inst can not use here!");
    }
    inst = vps_ireturn(top->vps);
    ulog("return");
    LATTR_RETURN(lar_vps_apd,inst);
  })

/*
 * define attribute retvoid
 */
LDEFATTR(retvoid,"retvoid",{
    vps_inst* inst;

    if(!parent || parent->t != vdfgk_blk){
      uabort("retvoid inst can not use here!");
    }
    inst = vps_iretvoid(top->vps);
    ulog("retvoid");
    LATTR_RETURN(lar_vps_apd,inst);
  })

/*
 * define attribute ref
 */
LDEFATTR(ref,"ref",{
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;

    inst = NULL;
    if(!parent || parent->t != vdfgk_blk){
      uabort("ref inst can not use here!");
    }
    next = last_cdr(ast_obj);
    if(!next){
      uabort("ref inst have no operand!");
    }
    if(next->t != lastk_cons){
      uabort("ref inst error!");
    }
    obj = last_car(next);
    if(obj->t == lastk_symbol){
      uabort("ref inst error!");
    }else if(obj->t == lastk_number){
      last_number* num = (last_number*)obj;
      inst = vps_irefimm(top->vps,(usize_t)num->dnum);
    }else{
      uabort("ref inst error!");
    }
    ulog("ref");
    LATTR_RETURN(lar_vps_apd,inst);
  })

/*
 * define attribute set
 */
LDEFATTR(set,"set",{
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;

    inst = NULL;
    if(!parent || parent->t != vdfgk_blk){
      uabort("set inst can not use here!");
    }
    next = last_cdr(ast_obj);
    if(!next){
      uabort("set inst have no operand!");
    }
    if(next->t != lastk_cons){
      uabort("set inst error!");
    }
    obj = last_car(next);
    if(obj->t == lastk_symbol){
      uabort("set inst error!");
    }else if(obj->t == lastk_number){
      last_number* num = (last_number*)obj;
      inst = vps_isetimm(top->vps,(usize_t)num->dnum);
    }else{
      uabort("set inst error!");
    }
    ulog("set");
    LATTR_RETURN(lar_vps_apd,inst);
  })

/*
 * define attribute label
 */
LDEFATTR(label,"label",{
    vdfg_block* blk;
    last_obj* obj;
    last_obj* next;

    if(!parent || parent->t != vdfgk_blk){
      uabort("label inst can not use here!");
    }
    next = last_cdr(ast_obj);
    if(!next){
      uabort("label inst have no operand!");
    }
    if(next->t != lastk_cons){
      uabort("label inst error!");
    }
    blk = NULL;
    obj = last_car(next);
    if (obj->t == lastk_symbol) {
      last_symbol* symbol = (last_symbol*)obj;
      blk = vdfg_block_new(top->vps);
      if (!blk) {
	uabort("label new blk error!");
      }
      blk->name = symbol->name;
    } else {
      uabort("label inst error!");
    }
    ulog("label");
    LATTR_RETURN(lar_blk_new,blk);
  })

/*
 * define attribute nop
 */
LDEFATTR(nop,"nop",{
    vps_inst* inst;

    if(!parent || parent->t != vdfgk_blk){
      uabort("nop inst can not use here!");
    }
    inst = vps_inop(top->vps);
    ulog("nop");
    LATTR_RETURN(lar_vps_apd,inst);
  })

/*
 * declare attribute
 */
LATTRONLOAD(base,{
    LDECLATTR(entry);
    LDECLATTR(g_subr);
    LDECLATTR(subr);
    LDECLATTR(g_var);
    LDECLATTR(var);
    LDECLATTR(nop);
    LDECLATTR(load);
    LDECLATTR(store);
    LDECLATTR(push);
    LDECLATTR(top);
    LDECLATTR(pop);
    LDECLATTR(jmp);
    LDECLATTR(jmpi);
    LDECLATTR(eq);
    LDECLATTR(gt);
    LDECLATTR(lt);
    LDECLATTR(and);
    LDECLATTR(or);
    LDECLATTR(not);
    LDECLATTR(add);
    LDECLATTR(sub);
    LDECLATTR(mul);
    LDECLATTR(div);
    LDECLATTR(call);
    LDECLATTR(return);
    LDECLATTR(retvoid);
    LDECLATTR(ref);
    LDECLATTR(set);
    LDECLATTR(label);
  })
