/*
 * common function define subr
 */
static vdfg_graph* subr(vps_mod* vps,vps_dfg* parent,last_obj* ast_obj){ 
  last_obj* next;
  last_obj* obj;
  last_symbol* subr_name;
  last_obj* args;
  vdfg_graph* grp;
  vdfg_block* blk;

  next = last_cdr(ast_obj);
  if(next->t != lastk_cons){
    uabort("subr error!");
  }

  obj = last_car(next);
  if(obj->t != lastk_symbol){
    uabort("subr name invalid!");
  }
  subr_name = (last_symbol*)obj;

  next = last_cdr(next);
  if(next->t != lastk_cons){
    uabort("subr error!");
  }

  grp = vdfg_graph_new();
  if(!grp){
    uabort("subr new dfg error!");
  }
  grp->parent = (vps_t*)vps;

  obj = last_car(next);
  if(obj){
    int arg_idx = 0;
    if(obj->t != lastk_cons){
      uabort("subr args invalid!");
    }
    args = obj;
    /* args procedure */
    while(args != NULL){
      last_obj* arg = last_car(args);
      last_symbol* sym;
      vps_data* data;

      if (arg->t != lastk_symbol) {
	uabort("arg not a symbol!");
      }
      sym = (last_symbol*)arg;
      data = vps_any_new(sym->name,vstk_stack);
      if(!data){
	uabort("vps_any_new error!");
      }
      data->idx = arg_idx;
      vdfg_grp_dtapd(grp,data);
      args = last_cdr(args);
      arg_idx++;
    }
  }
  
  grp->name = subr_name->name;
  blk = vdfg_block_new();
  if(!blk){
    uabort("subr new blk error!");
  }
  blk->parent = (vps_t*)grp;
  vdfg_grp_cdapd(grp,(vps_dfg*)blk);
    
  next = last_cdr(next);
  while(next){
    last_obj* car;
    last_symbol* inst_name;
    if(next->t != lastk_cons){
      uabort("subr error!");
    }
    obj = last_car(next);
    if(obj->t != lastk_cons){
      uabort("subr error!");
    }
    car = last_car(obj);
    if(car->t != lastk_symbol){
      uabort("subr inst invalid!");
    }
    inst_name = (last_symbol*)car;
    if(inst_name->attr){
      last_attr* attr = inst_name->attr;
      vps_t* inst = (attr->action)(vps,(vps_dfg*)blk,obj);
      if(inst == NULL || inst->t != vpsk_inst){
	uabort("not a inst!");
      }
      vdfg_blk_apd(blk,(vps_inst*)inst);
    }
    next = last_cdr(next);
  }
    
  return grp;
}

/*
 * define attribute entry
 */
LDEFATTR(entry,"entry",{
    vdfg_graph* grp;
    grp = subr(vps,parent,ast_obj);
    vps->entry = grp;
    return NULL;
  })

/*
 * define attribute subr
 */
LDEFATTR(subr,"subr",{
    vdfg_graph* grp = subr(vps,parent,ast_obj);
    vps_mod_code_put(vps,grp);
    return NULL;
  })

/*
 * define attribute load
 */
LDEFATTR(load,"load",{
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;

    next = last_cdr(ast_obj);
    if(next->t != lastk_cons){
      uabort("load inst error!");
    }
    obj = last_car(next);
    if(obj->t == lastk_symbol){
      last_symbol* sym = (last_symbol*)obj;
      inst = vps_iloaddt(sym->name);
    }else if(obj->t == lastk_number){
      last_number* num = (last_number*)obj;
      inst = vps_iloadimm((usize_t)num->dnum);
    }else{
      uabort("load inst error!");      
    }
    ulog("load");
    return (vps_t*)inst;
  })

/*
 * define attribute push
 */
LDEFATTR(push,"push",{
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;

    next = last_cdr(ast_obj);
    if(next->t != lastk_cons){
      uabort("push inst error!");
    }
    obj = last_car(next);
    if(obj->t == lastk_symbol){
      last_symbol* sym = (last_symbol*)obj;
      inst = vps_ipushdt(vps,sym->name);
    }else if(obj->t == lastk_number){
      last_number* num = (last_number*)obj;
      inst = vps_ipushimm(vps,num->name,num->dnum);
    }else{
      uabort("push inst error!");
    }
    ulog("push");
    return (vps_t*)inst;
  })

/*
 * define attribute add
 */
LDEFATTR(add,"add",{
    vps_inst* inst;
    inst = vps_iadd();
    ulog("add");
    return (vps_t*)inst;
  })

/*
 * define attribute sub
 */
LDEFATTR(sub,"sub",{
    vps_inst* inst;
    inst = vps_isub();
    ulog("sub");
    return (vps_t*)inst;
  })

/*
 * define attribute jmpi
 */
LDEFATTR(jmpi,"jmpi",{
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;

    next = last_cdr(ast_obj);
    if(next->t != lastk_cons){
      uabort("jmpi inst error!");
    }
    obj = last_car(next);
    if(obj->t == lastk_symbol){
      uabort("jmpi inst error!");
    }else if(obj->t == lastk_number){
      last_number* num = (last_number*)obj;
      inst = vps_ijmpiimm((usize_t)num->dnum);
    }else{
      uabort("jmpi inst error!");
    }
    ulog("jmpi");
    return (vps_t*)inst;
  })

/*
 * define attribute jmp
 */
LDEFATTR(jmp,"jmp",{
    vps_inst* inst;
    last_obj* obj;
    last_obj* next;

    next = last_cdr(ast_obj);
    if(next->t != lastk_cons){
      uabort("jmp inst error!");
    }
    obj = last_car(next);
    if(obj->t == lastk_symbol){
      uabort("jmp inst error!");
    }else if(obj->t == lastk_number){
      last_number* num = (last_number*)obj;
      inst = vps_ijmpimm((usize_t)num->dnum);
    }else{
      uabort("jmp inst error!");
    }
    ulog("jmp");
    return (vps_t*)inst;
  })

/*
 * define attribute eq
 */
LDEFATTR(eq,"eq",{
    vps_inst* inst;
    inst = vps_ieq();
    ulog("eq");
    return (vps_t*)inst;
  })

/*
 * define attribute call
 */
LDEFATTR(call,"call",{
    vps_inst* inst;
    inst = vps_icall();
    ulog("call");
    return (vps_t*)inst;
  })

/*
 * define attribute return
 */
LDEFATTR(return,"return",{
    vps_inst* inst;
    inst = vps_ireturn();
    ulog("return");
    return (vps_t*)inst;
  })

/*
 * define attribute nop
 */
LDEFATTR(nop,"nop",{
    vps_inst* inst;
    inst = vps_inop();
    ulog("nop");
    return (vps_t*)inst;
  })

/*
 * declare attribute
 */
LATTRONLOAD(base,{
    LDECLATTR(entry);
    LDECLATTR(subr);
    LDECLATTR(load);
    LDECLATTR(push);
    LDECLATTR(add);
    LDECLATTR(sub);
    LDECLATTR(jmp);
    LDECLATTR(jmpi);
    LDECLATTR(eq);
    LDECLATTR(call);
    LDECLATTR(return);
    LDECLATTR(nop);
  })
